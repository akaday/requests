<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="6" skipped="16" tests="610" time="120.615" timestamp="2024-11-04T08:56:58.930052+01:00" hostname="akaday-SYS9"><testcase classname="tests.test_adapters" name="test_request_url_trims_leading_path_separators" time="0.014" /><testcase classname="tests.test_adapters" name="test_http_adapter_send" time="0.251" /><testcase classname="tests.test_adapters" name="test_http_adapter_cert_verify" time="0.002"><failure message="assert None is not None&#10; +  where None = &lt;urllib3.connectionpool.HTTPSConnectionPool object at 0x7f6149c1ddf0&gt;.ca_certs">def test_http_adapter_cert_verify():
        """Test the cert_verify method of HTTPAdapter."""
        adapter = requests.adapters.HTTPAdapter()
        conn = adapter.get_connection("https://httpbin.org")
        adapter.cert_verify(conn, "https://httpbin.org", True, None)
        assert conn.cert_reqs == "CERT_REQUIRED"
&gt;       assert conn.ca_certs is not None
E       assert None is not None
E        +  where None = &lt;urllib3.connectionpool.HTTPSConnectionPool object at 0x7f6149c1ddf0&gt;.ca_certs

tests/test_adapters.py:27: AssertionError</failure></testcase><testcase classname="tests.test_help" name="test_system_ssl" time="0.001" /><testcase classname="tests.test_help" name="test_idna_without_version_attribute" time="0.003" /><testcase classname="tests.test_help" name="test_idna_with_version_attribute" time="0.002" /><testcase classname="tests.test_hooks" name="test_hooks[hook-ata]" time="0.001" /><testcase classname="tests.test_hooks" name="test_hooks[hooks_list1-ta]" time="0.001" /><testcase classname="tests.test_hooks" name="test_default_hooks" time="0.001" /><testcase classname="tests.test_hooks" name="test_hooks_with_multiple_hooks" time="0.001" /><testcase classname="tests.test_hooks" name="test_hooks_with_no_hooks" time="0.001" /><testcase classname="tests.test_lowlevel" name="test_chunked_upload" time="0.507" /><testcase classname="tests.test_lowlevel" name="test_chunked_encoding_error" time="0.507" /><testcase classname="tests.test_lowlevel" name="test_chunked_upload_uses_only_specified_host_header" time="0.507" /><testcase classname="tests.test_lowlevel" name="test_chunked_upload_doesnt_skip_host_header" time="0.505" /><testcase classname="tests.test_lowlevel" name="test_conflicting_content_lengths" time="0.506" /><testcase classname="tests.test_lowlevel" name="test_digestauth_401_count_reset_on_redirect" time="2.434" /><testcase classname="tests.test_lowlevel" name="test_digestauth_401_only_sent_once" time="1.795" /><testcase classname="tests.test_lowlevel" name="test_digestauth_only_on_4xx" time="1.006" /><testcase classname="tests.test_lowlevel" name="test_use_proxy_from_environment[http_proxy-http]" time="0.505" /><testcase classname="tests.test_lowlevel" name="test_use_proxy_from_environment[https_proxy-https]" time="0.506" /><testcase classname="tests.test_lowlevel" name="test_use_proxy_from_environment[all_proxy-http]" time="0.508" /><testcase classname="tests.test_lowlevel" name="test_use_proxy_from_environment[all_proxy-https]" time="0.506" /><testcase classname="tests.test_lowlevel" name="test_use_proxy_from_environment[HTTP_PROXY-http]" time="0.513" /><testcase classname="tests.test_lowlevel" name="test_use_proxy_from_environment[HTTPS_PROXY-https]" time="0.507" /><testcase classname="tests.test_lowlevel" name="test_use_proxy_from_environment[ALL_PROXY-http]" time="0.509" /><testcase classname="tests.test_lowlevel" name="test_use_proxy_from_environment[ALL_PROXY-https]" time="0.507" /><testcase classname="tests.test_lowlevel" name="test_redirect_rfc1808_to_non_ascii_location" time="1.012" /><testcase classname="tests.test_lowlevel" name="test_fragment_not_sent_with_request" time="0.506" /><testcase classname="tests.test_lowlevel" name="test_fragment_update_on_redirect" time="1.514" /><testcase classname="tests.test_lowlevel" name="test_json_decode_compatibility_for_alt_utf_encodings" time="5.530" /><testcase classname="tests.test_packages" name="test_can_access_urllib3_attribute" time="0.001" /><testcase classname="tests.test_packages" name="test_can_access_idna_attribute" time="0.001" /><testcase classname="tests.test_packages" name="test_can_access_chardet_attribute" time="0.002" /><testcase classname="tests.test_requests.TestRequests" name="test_entry_points" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_invalid_url[MissingSchema-hiwpefhipowhefopw]" time="0.003" /><testcase classname="tests.test_requests.TestRequests" name="test_invalid_url[InvalidSchema-localhost:3128]" time="0.004" /><testcase classname="tests.test_requests.TestRequests" name="test_invalid_url[InvalidSchema-localhost.localdomain:3128/]" time="0.003" /><testcase classname="tests.test_requests.TestRequests" name="test_invalid_url[InvalidSchema-10.122.1.1:3128/]" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_invalid_url[InvalidURL-http://]" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_invalid_url[InvalidURL-http://*example.com]" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_invalid_url[InvalidURL-http://.example.com]" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_basic_building" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_no_content_length[GET]" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_no_content_length[HEAD]" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_no_body_content_length[POST]" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_no_body_content_length[PUT]" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_no_body_content_length[PATCH]" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_no_body_content_length[OPTIONS]" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_empty_content_length[POST]" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_empty_content_length[PUT]" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_empty_content_length[PATCH]" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_empty_content_length[OPTIONS]" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_override_content_length" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_path_is_not_double_encoded" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_params_are_added_before_fragment[http://example.com/path#fragment-http://example.com/path?a=b#fragment]" time="0.003" /><testcase classname="tests.test_requests.TestRequests" name="test_params_are_added_before_fragment[http://example.com/path?key=value#fragment-http://example.com/path?key=value&amp;a=b#fragment]" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_params_original_order_is_preserved_by_default" time="0.002" /><testcase classname="tests.test_requests.TestRequests" name="test_params_bytes_are_encoded" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_binary_put" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_whitespaces_are_removed_from_url" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_mixed_case_scheme_acceptable[http://]" time="0.004" /><testcase classname="tests.test_requests.TestRequests" name="test_mixed_case_scheme_acceptable[HTTP://]" time="0.002" /><testcase classname="tests.test_requests.TestRequests" name="test_mixed_case_scheme_acceptable[hTTp://]" time="0.003" /><testcase classname="tests.test_requests.TestRequests" name="test_mixed_case_scheme_acceptable[HttP://]" time="0.003" /><testcase classname="tests.test_requests.TestRequests" name="test_HTTP_200_OK_GET_ALTERNATIVE" time="0.002" /><testcase classname="tests.test_requests.TestRequests" name="test_HTTP_302_ALLOW_REDIRECT_GET" time="0.004" /><testcase classname="tests.test_requests.TestRequests" name="test_HTTP_307_ALLOW_REDIRECT_POST" time="0.004" /><testcase classname="tests.test_requests.TestRequests" name="test_HTTP_307_ALLOW_REDIRECT_POST_WITH_SEEKABLE" time="0.013" /><testcase classname="tests.test_requests.TestRequests" name="test_HTTP_302_TOO_MANY_REDIRECTS" time="0.072" /><testcase classname="tests.test_requests.TestRequests" name="test_HTTP_302_TOO_MANY_REDIRECTS_WITH_PARAMS" time="0.011" /><testcase classname="tests.test_requests.TestRequests" name="test_http_301_changes_post_to_get" time="0.006" /><testcase classname="tests.test_requests.TestRequests" name="test_http_301_doesnt_change_head_to_get" time="0.004" /><testcase classname="tests.test_requests.TestRequests" name="test_http_302_changes_post_to_get" time="0.008" /><testcase classname="tests.test_requests.TestRequests" name="test_http_302_doesnt_change_head_to_get" time="0.005" /><testcase classname="tests.test_requests.TestRequests" name="test_http_303_changes_post_to_get" time="0.010" /><testcase classname="tests.test_requests.TestRequests" name="test_http_303_doesnt_change_head_to_get" time="0.009" /><testcase classname="tests.test_requests.TestRequests" name="test_header_and_body_removal_on_redirect" time="0.005" /><testcase classname="tests.test_requests.TestRequests" name="test_transfer_enc_removal_on_redirect" time="0.003" /><testcase classname="tests.test_requests.TestRequests" name="test_fragment_maintained_on_redirect" time="0.003" /><testcase classname="tests.test_requests.TestRequests" name="test_HTTP_200_OK_GET_WITH_PARAMS" time="0.007" /><testcase classname="tests.test_requests.TestRequests" name="test_HTTP_200_OK_GET_WITH_MIXED_PARAMS" time="0.003" /><testcase classname="tests.test_requests.TestRequests" name="test_set_cookie_on_301" time="0.004" /><testcase classname="tests.test_requests.TestRequests" name="test_cookie_sent_on_redirect" time="0.010" /><testcase classname="tests.test_requests.TestRequests" name="test_cookie_removed_on_expire" time="0.010" /><testcase classname="tests.test_requests.TestRequests" name="test_cookie_quote_wrapped" time="0.010" /><testcase classname="tests.test_requests.TestRequests" name="test_cookie_persists_via_api" time="0.006" /><testcase classname="tests.test_requests.TestRequests" name="test_request_cookie_overrides_session_cookie" time="0.004" /><testcase classname="tests.test_requests.TestRequests" name="test_request_cookies_not_persisted" time="0.002" /><testcase classname="tests.test_requests.TestRequests" name="test_generic_cookiejar_works" time="0.005" /><testcase classname="tests.test_requests.TestRequests" name="test_param_cookiejar_works" time="0.003" /><testcase classname="tests.test_requests.TestRequests" name="test_cookielib_cookiejar_on_redirect" time="0.004" /><testcase classname="tests.test_requests.TestRequests" name="test_requests_in_history_are_not_overridden" time="0.009" /><testcase classname="tests.test_requests.TestRequests" name="test_history_is_always_a_list" time="0.006" /><testcase classname="tests.test_requests.TestRequests" name="test_headers_on_session_with_None_are_not_sent" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_headers_preserve_order" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_user_agent_transfers[User-agent]" time="0.003" /><testcase classname="tests.test_requests.TestRequests" name="test_user_agent_transfers[user-agent]" time="0.006" /><testcase classname="tests.test_requests.TestRequests" name="test_HTTP_200_OK_HEAD" time="0.002" /><testcase classname="tests.test_requests.TestRequests" name="test_HTTP_200_OK_PUT" time="0.002" /><testcase classname="tests.test_requests.TestRequests" name="test_BASICAUTH_TUPLE_HTTP_200_OK_GET" time="0.006" /><testcase classname="tests.test_requests.TestRequests" name="test_set_basicauth[user-pass]" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_set_basicauth[\xd0\xb8\xd0\xbc\xd1\x8f-\xd0\xbf\xd0\xb0\xd1\x80\xd0\xbe\xd0\xbb\xd1\x8c]" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_set_basicauth[42-42]" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_set_basicauth[None-None]" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_basicauth_encodes_byte_strings" time="0.002" /><testcase classname="tests.test_requests.TestRequests" name="test_errors[http://doesnotexist.google.com-ConnectionError]" time="0.066" /><testcase classname="tests.test_requests.TestRequests" name="test_errors[http://localhost:1-ConnectionError]" time="0.003" /><testcase classname="tests.test_requests.TestRequests" name="test_errors[http://fe80::5054:ff:fe5a:fc0-InvalidURL]" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_proxy_error" time="10.011" /><testcase classname="tests.test_requests.TestRequests" name="test_proxy_error_on_bad_url" time="0.008" /><testcase classname="tests.test_requests.TestRequests" name="test_respect_proxy_env_on_send_self_prepared_request" time="0.002" /><testcase classname="tests.test_requests.TestRequests" name="test_respect_proxy_env_on_send_session_prepared_request" time="0.003" /><testcase classname="tests.test_requests.TestRequests" name="test_respect_proxy_env_on_send_with_redirects" time="0.002" /><testcase classname="tests.test_requests.TestRequests" name="test_respect_proxy_env_on_get" time="0.002" /><testcase classname="tests.test_requests.TestRequests" name="test_respect_proxy_env_on_request" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_proxy_authorization_preserved_on_request" time="0.005" /><testcase classname="tests.test_requests.TestRequests" name="test_proxy_authorization_not_appended_to_https_request[http://example.com-True]" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_proxy_authorization_not_appended_to_https_request[https://example.com-False]" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_basicauth_with_netrc" time="0.008" /><testcase classname="tests.test_requests.TestRequests" name="test_DIGEST_HTTP_200_OK_GET" time="0.193"><failure message="assert 401 == 200&#10; +  where 401 = &lt;Response [401]&gt;.status_code">self = &lt;tests.test_requests.TestRequests object at 0x7f6149cd2b10&gt;, httpbin = &lt;function prepare_url.&lt;locals&gt;.inner at 0x7f6149bc60c0&gt;

    def test_DIGEST_HTTP_200_OK_GET(self, httpbin):
        for authtype in self.digest_auth_algo:
            auth = HTTPDigestAuth("user", "pass")
            url = httpbin("digest-auth", "auth", "user", "pass", authtype, "never")
    
            r = requests.get(url, auth=auth)
&gt;           assert r.status_code == 200
E           assert 401 == 200
E            +  where 401 = &lt;Response [401]&gt;.status_code

tests/test_requests.py:713: AssertionError</failure></testcase><testcase classname="tests.test_requests.TestRequests" name="test_DIGEST_AUTH_RETURNS_COOKIE" time="0.249"><failure message="assert 401 == 200&#10; +  where 401 = &lt;Response [401]&gt;.status_code">self = &lt;tests.test_requests.TestRequests object at 0x7f6149cd2840&gt;, httpbin = &lt;function prepare_url.&lt;locals&gt;.inner at 0x7f6149bc7ba0&gt;

    def test_DIGEST_AUTH_RETURNS_COOKIE(self, httpbin):
        for authtype in self.digest_auth_algo:
            url = httpbin("digest-auth", "auth", "user", "pass", authtype)
            auth = HTTPDigestAuth("user", "pass")
            r = requests.get(url)
            assert r.cookies["fake"] == "fake_value"
    
            r = requests.get(url, auth=auth)
&gt;           assert r.status_code == 200
E           assert 401 == 200
E            +  where 401 = &lt;Response [401]&gt;.status_code

tests/test_requests.py:732: AssertionError</failure></testcase><testcase classname="tests.test_requests.TestRequests" name="test_DIGEST_AUTH_SETS_SESSION_COOKIES" time="0.444" /><testcase classname="tests.test_requests.TestRequests" name="test_DIGEST_STREAM" time="0.302"><failure message="AssertionError: assert b'' != b''&#10; +  where b'' = read()&#10; +    where read = &lt;urllib3.response.HTTPResponse object at 0x7f6149c87160&gt;.read&#10; +      where &lt;urllib3.response.HTTPResponse object at 0x7f6149c87160&gt; = &lt;Response [401]&gt;.raw">self = &lt;tests.test_requests.TestRequests object at 0x7f6149cd25a0&gt;, httpbin = &lt;function prepare_url.&lt;locals&gt;.inner at 0x7f6149bc67a0&gt;

    def test_DIGEST_STREAM(self, httpbin):
        for authtype in self.digest_auth_algo:
            auth = HTTPDigestAuth("user", "pass")
            url = httpbin("digest-auth", "auth", "user", "pass", authtype)
    
            r = requests.get(url, auth=auth, stream=True)
&gt;           assert r.raw.read() != b""
E           AssertionError: assert b'' != b''
E            +  where b'' = read()
E            +    where read = &lt;urllib3.response.HTTPResponse object at 0x7f6149c87160&gt;.read
E            +      where &lt;urllib3.response.HTTPResponse object at 0x7f6149c87160&gt; = &lt;Response [401]&gt;.raw

tests/test_requests.py:748: AssertionError</failure></testcase><testcase classname="tests.test_requests.TestRequests" name="test_DIGESTAUTH_WRONG_HTTP_401_GET" time="1.588" /><testcase classname="tests.test_requests.TestRequests" name="test_DIGESTAUTH_QUOTES_QOP_VALUE" time="0.495" /><testcase classname="tests.test_requests.TestRequests" name="test_POSTBIN_GET_POST_FILES" time="0.021" /><testcase classname="tests.test_requests.TestRequests" name="test_invalid_files_input" time="0.005" /><testcase classname="tests.test_requests.TestRequests" name="test_POSTBIN_SEEKED_OBJECT_WITH_NO_ITER" time="0.008" /><testcase classname="tests.test_requests.TestRequests" name="test_POSTBIN_GET_POST_FILES_WITH_DATA" time="0.021" /><testcase classname="tests.test_requests.TestRequests" name="test_post_with_custom_mapping" time="0.005" /><testcase classname="tests.test_requests.TestRequests" name="test_conflicting_post_params" time="0.009" /><testcase classname="tests.test_requests.TestRequests" name="test_request_ok_set" time="0.004" /><testcase classname="tests.test_requests.TestRequests" name="test_status_raising" time="0.005" /><testcase classname="tests.test_requests.TestRequests" name="test_decompress_gzip" time="0.004" /><testcase classname="tests.test_requests.TestRequests" name="test_unicode_get[/get-params0]" time="0.004" /><testcase classname="tests.test_requests.TestRequests" name="test_unicode_get[/get-params1]" time="0.003" /><testcase classname="tests.test_requests.TestRequests" name="test_unicode_get[/get-params2]" time="0.003" /><testcase classname="tests.test_requests.TestRequests" name="test_unicode_get[/get-params3]" time="0.005" /><testcase classname="tests.test_requests.TestRequests" name="test_unicode_get[\xf8-params4]" time="0.003" /><testcase classname="tests.test_requests.TestRequests" name="test_unicode_header_name" time="0.003" /><testcase classname="tests.test_requests.TestRequests" name="test_pyopenssl_redirect" time="0.149" /><testcase classname="tests.test_requests.TestRequests" name="test_invalid_ca_certificate_path" time="0.004" /><testcase classname="tests.test_requests.TestRequests" name="test_invalid_ssl_certificate_files" time="0.003" /><testcase classname="tests.test_requests.TestRequests" name="test_env_cert_bundles[env0-True]" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_env_cert_bundles[env1-/some/path]" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_env_cert_bundles[env2-True]" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_env_cert_bundles[env3-/some/path]" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_env_cert_bundles[env4-True]" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_env_cert_bundles[env5-True]" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_env_cert_bundles[env6-/some/path]" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_env_cert_bundles[env7-/curl/path]" time="0.002" /><testcase classname="tests.test_requests.TestRequests" name="test_http_with_certificate" time="0.057" /><testcase classname="tests.test_requests.TestRequests" name="test_https_warnings" time="0.000"><skipped type="pytest.skip" message="urllib3 2.0 removed that warning and errors out instead">/mnt/c/Users/start/new_requests/tests/test_requests.py:991: urllib3 2.0 removed that warning and errors out instead</skipped></testcase><testcase classname="tests.test_requests.TestRequests" name="test_certificate_failure" time="0.022" /><testcase classname="tests.test_requests.TestRequests" name="test_urlencoded_get_query_multivalued_param" time="0.003" /><testcase classname="tests.test_requests.TestRequests" name="test_form_encoded_post_query_multivalued_element" time="0.000" /><testcase classname="tests.test_requests.TestRequests" name="test_different_encodings_dont_break_post" time="0.017" /><testcase classname="tests.test_requests.TestRequests" name="test_unicode_multipart_post[data0]" time="0.020" /><testcase classname="tests.test_requests.TestRequests" name="test_unicode_multipart_post[data1]" time="0.019" /><testcase classname="tests.test_requests.TestRequests" name="test_unicode_multipart_post[data2]" time="0.013" /><testcase classname="tests.test_requests.TestRequests" name="test_unicode_multipart_post[data3]" time="0.012" /><testcase classname="tests.test_requests.TestRequests" name="test_unicode_multipart_post_fieldnames" time="0.008" /><testcase classname="tests.test_requests.TestRequests" name="test_unicode_method_name" time="0.018" /><testcase classname="tests.test_requests.TestRequests" name="test_unicode_method_name_with_request_object" time="0.011" /><testcase classname="tests.test_requests.TestRequests" name="test_non_prepared_request_error" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_custom_content_type" time="0.020" /><testcase classname="tests.test_requests.TestRequests" name="test_hook_receives_request_arguments" time="0.003" /><testcase classname="tests.test_requests.TestRequests" name="test_session_hooks_are_used_with_no_request_hooks" time="0.002" /><testcase classname="tests.test_requests.TestRequests" name="test_session_hooks_are_overridden_by_request_hooks" time="0.004" /><testcase classname="tests.test_requests.TestRequests" name="test_prepared_request_hook" time="0.003" /><testcase classname="tests.test_requests.TestRequests" name="test_prepared_from_session" time="0.003" /><testcase classname="tests.test_requests.TestRequests" name="test_prepare_request_with_bytestring_url" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_request_with_bytestring_host" time="0.003" /><testcase classname="tests.test_requests.TestRequests" name="test_links" time="0.000" /><testcase classname="tests.test_requests.TestRequests" name="test_cookie_parameters" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_cookie_as_dict_keeps_len" time="0.000" /><testcase classname="tests.test_requests.TestRequests" name="test_cookie_as_dict_keeps_items" time="0.000" /><testcase classname="tests.test_requests.TestRequests" name="test_cookie_as_dict_keys" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_cookie_as_dict_values" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_cookie_as_dict_items" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_cookie_duplicate_names_different_domains" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_cookie_duplicate_names_raises_cookie_conflict_error" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_cookie_policy_copy" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_time_elapsed_blank" time="0.005" /><testcase classname="tests.test_requests.TestRequests" name="test_empty_response_has_content_none" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_response_is_iterable" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_response_decode_unicode" time="0.002" /><testcase classname="tests.test_requests.TestRequests" name="test_response_reason_unicode" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_response_reason_unicode_fallback" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_response_chunk_size_type" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_iter_content_wraps_exceptions[ProtocolError-args0-ChunkedEncodingError]" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_iter_content_wraps_exceptions[DecodeError-args1-ContentDecodingError]" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_iter_content_wraps_exceptions[ReadTimeoutError-args2-ConnectionError]" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_iter_content_wraps_exceptions[SSLError-args3-SSLError]" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_request_and_response_are_pickleable" time="0.004" /><testcase classname="tests.test_requests.TestRequests" name="test_prepared_request_is_pickleable" time="0.005" /><testcase classname="tests.test_requests.TestRequests" name="test_prepared_request_with_file_is_pickleable" time="0.013" /><testcase classname="tests.test_requests.TestRequests" name="test_prepared_request_with_hook_is_pickleable" time="0.005" /><testcase classname="tests.test_requests.TestRequests" name="test_cannot_send_unprepared_requests" time="0.000" /><testcase classname="tests.test_requests.TestRequests" name="test_http_error" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_session_pickling" time="0.005" /><testcase classname="tests.test_requests.TestRequests" name="test_fixes_1329" time="0.004" /><testcase classname="tests.test_requests.TestRequests" name="test_uppercase_scheme_redirect" time="0.027" /><testcase classname="tests.test_requests.TestRequests" name="test_transport_adapter_ordering" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_session_get_adapter_prefix_matching" time="0.000" /><testcase classname="tests.test_requests.TestRequests" name="test_session_get_adapter_prefix_matching_mixed_case" time="0.000" /><testcase classname="tests.test_requests.TestRequests" name="test_session_get_adapter_prefix_matching_is_case_insensitive" time="0.000" /><testcase classname="tests.test_requests.TestRequests" name="test_header_remove_is_case_insensitive" time="0.005" /><testcase classname="tests.test_requests.TestRequests" name="test_params_are_merged_case_sensitive" time="0.004" /><testcase classname="tests.test_requests.TestRequests" name="test_long_authinfo_in_url" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_header_keys_are_native" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_header_validation" time="0.009" /><testcase classname="tests.test_requests.TestRequests" name="test_header_value_not_str[invalid_header0-foo]" time="0.002" /><testcase classname="tests.test_requests.TestRequests" name="test_header_value_not_str[invalid_header1-bar]" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_header_value_not_str[invalid_header2-baz]" time="0.002" /><testcase classname="tests.test_requests.TestRequests" name="test_header_no_return_chars[invalid_header0]" time="0.003" /><testcase classname="tests.test_requests.TestRequests" name="test_header_no_return_chars[invalid_header1]" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_header_no_return_chars[invalid_header2]" time="0.002" /><testcase classname="tests.test_requests.TestRequests" name="test_header_no_return_chars[invalid_header3]" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_header_no_return_chars[invalid_header4]" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_header_no_return_chars[invalid_header5]" time="0.002" /><testcase classname="tests.test_requests.TestRequests" name="test_header_no_return_chars[invalid_header6]" time="0.002" /><testcase classname="tests.test_requests.TestRequests" name="test_header_no_return_chars[invalid_header7]" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_header_no_leading_space[invalid_header0]" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_header_no_leading_space[invalid_header1]" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_header_no_leading_space[invalid_header2]" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_header_no_leading_space[invalid_header3]" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_header_no_leading_space[invalid_header4]" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_header_no_leading_space[invalid_header5]" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_header_no_leading_space[invalid_header6]" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_header_with_subclass_types" time="0.011" /><testcase classname="tests.test_requests.TestRequests" name="test_can_send_objects_with_files[foo0]" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_can_send_objects_with_files[foo1]" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_can_send_objects_with_files[files2]" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_can_send_file_object_with_non_string_filename" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_autoset_header_values_are_native" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_nonhttp_schemes_dont_check_URLs" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_auth_is_stripped_on_http_downgrade" time="0.043" /><testcase classname="tests.test_requests.TestRequests" name="test_auth_is_retained_for_redirect_on_host" time="0.007" /><testcase classname="tests.test_requests.TestRequests" name="test_should_strip_auth_host_change" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_should_strip_auth_http_downgrade" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_should_strip_auth_https_upgrade" time="0.002" /><testcase classname="tests.test_requests.TestRequests" name="test_should_strip_auth_port_change" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_should_strip_auth_default_port[https://example.com:443/foo-https://example.com/bar]" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_should_strip_auth_default_port[http://example.com:80/foo-http://example.com/bar]" time="0.002" /><testcase classname="tests.test_requests.TestRequests" name="test_should_strip_auth_default_port[https://example.com/foo-https://example.com:443/bar]" time="0.002" /><testcase classname="tests.test_requests.TestRequests" name="test_should_strip_auth_default_port[http://example.com/foo-http://example.com:80/bar]" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_manual_redirect_with_partial_body_read" time="0.009" /><testcase classname="tests.test_requests.TestRequests" name="test_prepare_body_position_non_stream" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_rewind_body" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_rewind_partially_read_body" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_rewind_body_no_seek" time="0.002" /><testcase classname="tests.test_requests.TestRequests" name="test_rewind_body_failed_seek" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_rewind_body_failed_tell" time="0.002" /><testcase classname="tests.test_requests.TestRequests" name="test_redirect_with_wrong_gzipped_header" time="0.007" /><testcase classname="tests.test_requests.TestRequests" name="test_basic_auth_str_is_always_native[test-test-Basic dGVzdDp0ZXN0]" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_basic_auth_str_is_always_native[\xd0\xb8\xd0\xbc\xd1\x8f-\xd0\xbf\xd0\xb0\xd1\x80\xd0\xbe\xd0\xbb\xd1\x8c-Basic 0LjQvNGPOtC/0LDRgNC+0LvRjA==]" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_requests_history_is_saved" time="0.016" /><testcase classname="tests.test_requests.TestRequests" name="test_json_param_post_content_type_works" time="0.003" /><testcase classname="tests.test_requests.TestRequests" name="test_json_param_post_should_not_override_data_param" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_response_iter_lines" time="0.004" /><testcase classname="tests.test_requests.TestRequests" name="test_response_context_manager" time="0.004" /><testcase classname="tests.test_requests.TestRequests" name="test_unconsumed_session_response_closes_connection" time="0.004" /><testcase classname="tests.test_requests.TestRequests" name="test_response_iter_lines_reentrant" time="0.004"><skipped type="pytest.xfail" message="" /></testcase><testcase classname="tests.test_requests.TestRequests" name="test_session_close_proxy_clear" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_proxy_auth" time="0.000" /><testcase classname="tests.test_requests.TestRequests" name="test_proxy_auth_empty_pass" time="0.000" /><testcase classname="tests.test_requests.TestRequests" name="test_response_json_when_content_is_None" time="0.003" /><testcase classname="tests.test_requests.TestRequests" name="test_response_without_release_conn" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_empty_stream_with_auth_does_not_set_content_length_header" time="0.001" /><testcase classname="tests.test_requests.TestRequests" name="test_stream_with_auth_does_not_set_transfer_encoding_header" time="0.000" /><testcase classname="tests.test_requests.TestRequests" name="test_chunked_upload_does_not_set_content_length_header" time="0.000" /><testcase classname="tests.test_requests.TestRequests" name="test_custom_redirect_mixin" time="0.006" /><testcase classname="tests.test_requests.TestCaseInsensitiveDict" name="test_init[cid0]" time="0.000" /><testcase classname="tests.test_requests.TestCaseInsensitiveDict" name="test_init[cid1]" time="0.000" /><testcase classname="tests.test_requests.TestCaseInsensitiveDict" name="test_init[cid2]" time="0.000" /><testcase classname="tests.test_requests.TestCaseInsensitiveDict" name="test_docstring_example" time="0.000" /><testcase classname="tests.test_requests.TestCaseInsensitiveDict" name="test_len" time="0.000" /><testcase classname="tests.test_requests.TestCaseInsensitiveDict" name="test_getitem" time="0.001" /><testcase classname="tests.test_requests.TestCaseInsensitiveDict" name="test_fixes_649" time="0.000" /><testcase classname="tests.test_requests.TestCaseInsensitiveDict" name="test_delitem" time="0.000" /><testcase classname="tests.test_requests.TestCaseInsensitiveDict" name="test_contains" time="0.000" /><testcase classname="tests.test_requests.TestCaseInsensitiveDict" name="test_get" time="0.000" /><testcase classname="tests.test_requests.TestCaseInsensitiveDict" name="test_update" time="0.001" /><testcase classname="tests.test_requests.TestCaseInsensitiveDict" name="test_update_retains_unchanged" time="0.001" /><testcase classname="tests.test_requests.TestCaseInsensitiveDict" name="test_iter" time="0.001" /><testcase classname="tests.test_requests.TestCaseInsensitiveDict" name="test_equality" time="0.002" /><testcase classname="tests.test_requests.TestCaseInsensitiveDict" name="test_setdefault" time="0.001" /><testcase classname="tests.test_requests.TestCaseInsensitiveDict" name="test_lower_items" time="0.002" /><testcase classname="tests.test_requests.TestCaseInsensitiveDict" name="test_preserve_key_case" time="0.001" /><testcase classname="tests.test_requests.TestCaseInsensitiveDict" name="test_preserve_last_key_case" time="0.001" /><testcase classname="tests.test_requests.TestCaseInsensitiveDict" name="test_copy" time="0.002" /><testcase classname="tests.test_requests.TestMorselToCookieExpires" name="test_expires_valid_str" time="0.007" /><testcase classname="tests.test_requests.TestMorselToCookieExpires" name="test_expires_invalid_int[100-TypeError]" time="0.001" /><testcase classname="tests.test_requests.TestMorselToCookieExpires" name="test_expires_invalid_int[woops-ValueError]" time="0.002" /><testcase classname="tests.test_requests.TestMorselToCookieExpires" name="test_expires_none" time="0.001" /><testcase classname="tests.test_requests.TestMorselToCookieMaxAge" name="test_max_age_valid_int" time="0.001" /><testcase classname="tests.test_requests.TestMorselToCookieMaxAge" name="test_max_age_invalid_str" time="0.001" /><testcase classname="tests.test_requests.TestTimeout" name="test_stream_timeout" time="2.005" /><testcase classname="tests.test_requests.TestTimeout" name="test_invalid_timeout[timeout0-(connect, read)]" time="0.003" /><testcase classname="tests.test_requests.TestTimeout" name="test_invalid_timeout[foo-must be an int, float or None]" time="0.002" /><testcase classname="tests.test_requests.TestTimeout" name="test_none_timeout[None]" time="7.980" /><testcase classname="tests.test_requests.TestTimeout" name="test_none_timeout[timeout1]" time="0.006" /><testcase classname="tests.test_requests.TestTimeout" name="test_read_timeout[timeout0]" time="0.103" /><testcase classname="tests.test_requests.TestTimeout" name="test_read_timeout[timeout1]" time="0.105" /><testcase classname="tests.test_requests.TestTimeout" name="test_connect_timeout[timeout0]" time="0.103" /><testcase classname="tests.test_requests.TestTimeout" name="test_connect_timeout[timeout1]" time="0.016"><failure message="requests.exceptions.ConnectionError: HTTPConnectionPool(host='10.255.255.1', port=80): Max retries exceeded with url: / (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7f6149c9ab40&gt;: Failed to establish a new connection: [Errno 113] No route to host'))">self = &lt;urllib3.connection.HTTPConnection object at 0x7f6149c9ab40&gt;

    def _new_conn(self) -&gt; socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
&gt;           sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )

myenv/lib/python3.12/site-packages/urllib3/connection.py:199: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
myenv/lib/python3.12/site-packages/urllib3/util/connection.py:85: in create_connection
    raise err
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

address = ('10.255.255.1', 80), timeout = 0.1, source_address = None, socket_options = [(6, 1, 1)]

    def create_connection(
        address: tuple[str, int],
        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,
        source_address: tuple[str, int] | None = None,
        socket_options: _TYPE_SOCKET_OPTIONS | None = None,
    ) -&gt; socket.socket:
        """Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`socket.getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of '' or port 0 tells the OS to use the default.
        """
    
        host, port = address
        if host.startswith("["):
            host = host.strip("[]")
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        try:
            host.encode("idna")
        except UnicodeError:
            raise LocationParseError(f"'{host}', label empty or too long") from None
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not _DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
&gt;               sock.connect(sa)
E               OSError: [Errno 113] No route to host

myenv/lib/python3.12/site-packages/urllib3/util/connection.py:73: OSError

The above exception was the direct cause of the following exception:

self = &lt;urllib3.connectionpool.HTTPConnectionPool object at 0x7f6149c98dd0&gt;, method = 'GET', url = '/', body = None
headers = {'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate, br', 'Accept': '*/*', 'Connection': 'keep-alive'}
retries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False, assert_same_host = False
timeout = Timeout(connect=0.1, read=None, total=None), pool_timeout = None, release_conn = False, chunked = False, body_pos = None, preload_content = False
decode_content = False, response_kw = {}, parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/', query=None, fragment=None), destination_scheme = None
conn = None, release_this_conn = True, http_tunnel_required = False, err = None, clean_exit = False

    def urlopen(  # type: ignore[override]
        self,
        method: str,
        url: str,
        body: _TYPE_BODY | None = None,
        headers: typing.Mapping[str, str] | None = None,
        retries: Retry | bool | int | None = None,
        redirect: bool = True,
        assert_same_host: bool = True,
        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,
        pool_timeout: int | None = None,
        release_conn: bool | None = None,
        chunked: bool = False,
        body_pos: _TYPE_BODY_POSITION | None = None,
        preload_content: bool = True,
        decode_content: bool = True,
        **response_kw: typing.Any,
    ) -&gt; BaseHTTPResponse:
        """
        Get a connection from the pool and perform an HTTP request. This is the
        lowest level call for making a request, so you'll need to specify all
        the raw details.
    
        .. note::
    
           More commonly, it's appropriate to use a convenience method
           such as :meth:`request`.
    
        .. note::
    
           `release_conn` will only behave as expected if
           `preload_content=False` because we want to make
           `preload_content=False` the default behaviour someday soon without
           breaking backwards compatibility.
    
        :param method:
            HTTP request method (such as GET, POST, PUT, etc.)
    
        :param url:
            The URL to perform the request on.
    
        :param body:
            Data to send in the request body, either :class:`str`, :class:`bytes`,
            an iterable of :class:`str`/:class:`bytes`, or a file-like object.
    
        :param headers:
            Dictionary of custom headers to send, such as User-Agent,
            If-None-Match, etc. If None, pool headers are used. If provided,
            these headers completely replace any pool-specific headers.
    
        :param retries:
            Configure the number of retries to allow before raising a
            :class:`~urllib3.exceptions.MaxRetryError` exception.
    
            If ``None`` (default) will retry 3 times, see ``Retry.DEFAULT``. Pass a
            :class:`~urllib3.util.retry.Retry` object for fine-grained control
            over different types of retries.
            Pass an integer number to retry connection errors that many times,
            but no other types of errors. Pass zero to never retry.
    
            If ``False``, then retries are disabled and any exception is raised
            immediately. Also, instead of raising a MaxRetryError on redirects,
            the redirect response will be returned.
    
        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.
    
        :param redirect:
            If True, automatically handle redirects (status codes 301, 302,
            303, 307, 308). Each redirect counts as a retry. Disabling retries
            will disable redirect, too.
    
        :param assert_same_host:
            If ``True``, will make sure that the host of the pool requests is
            consistent else will raise HostChangedError. When ``False``, you can
            use the pool on an HTTP proxy and request foreign hosts.
    
        :param timeout:
            If specified, overrides the default timeout for this one
            request. It may be a float (in seconds) or an instance of
            :class:`urllib3.util.Timeout`.
    
        :param pool_timeout:
            If set and the pool is set to block=True, then this method will
            block for ``pool_timeout`` seconds and raise EmptyPoolError if no
            connection is available within the time period.
    
        :param bool preload_content:
            If True, the response's body will be preloaded into memory.
    
        :param bool decode_content:
            If True, will attempt to decode the body based on the
            'content-encoding' header.
    
        :param release_conn:
            If False, then the urlopen call will not release the connection
            back into the pool once a response is received (but will release if
            you read the entire contents of the response such as when
            `preload_content=True`). This is useful if you're not preloading
            the response's content immediately. You will need to call
            ``r.release_conn()`` on the response ``r`` to return the connection
            back into the pool. If None, it takes the value of ``preload_content``
            which defaults to ``True``.
    
        :param bool chunked:
            If True, urllib3 will send the body using chunked transfer
            encoding. Otherwise, urllib3 will send the body using the standard
            content-length form. Defaults to False.
    
        :param int body_pos:
            Position to seek to in file-like body in the event of a retry or
            redirect. Typically this won't need to be set because urllib3 will
            auto-populate the value when needed.
        """
        parsed_url = parse_url(url)
        destination_scheme = parsed_url.scheme
    
        if headers is None:
            headers = self.headers
    
        if not isinstance(retries, Retry):
            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)
    
        if release_conn is None:
            release_conn = preload_content
    
        # Check host
        if assert_same_host and not self.is_same_host(url):
            raise HostChangedError(self, url, retries)
    
        # Ensure that the URL we're connecting to is properly encoded
        if url.startswith("/"):
            url = to_str(_encode_target(url))
        else:
            url = to_str(parsed_url.url)
    
        conn = None
    
        # Track whether `conn` needs to be released before
        # returning/raising/recursing. Update this variable if necessary, and
        # leave `release_conn` constant throughout the function. That way, if
        # the function recurses, the original value of `release_conn` will be
        # passed down into the recursive call, and its value will be respected.
        #
        # See issue #651 [1] for details.
        #
        # [1] &lt;https://github.com/urllib3/urllib3/issues/651&gt;
        release_this_conn = release_conn
    
        http_tunnel_required = connection_requires_http_tunnel(
            self.proxy, self.proxy_config, destination_scheme
        )
    
        # Merge the proxy headers. Only done when not using HTTP CONNECT. We
        # have to copy the headers dict so we can safely change it without those
        # changes being reflected in anyone else's copy.
        if not http_tunnel_required:
            headers = headers.copy()  # type: ignore[attr-defined]
            headers.update(self.proxy_headers)  # type: ignore[union-attr]
    
        # Must keep the exception bound to a separate variable or else Python 3
        # complains about UnboundLocalError.
        err = None
    
        # Keep track of whether we cleanly exited the except block. This
        # ensures we do proper cleanup in finally.
        clean_exit = False
    
        # Rewind body position, if needed. Record current position
        # for future rewinds in the event of a redirect/retry.
        body_pos = set_file_position(body, body_pos)
    
        try:
            # Request a connection from the queue.
            timeout_obj = self._get_timeout(timeout)
            conn = self._get_conn(timeout=pool_timeout)
    
            conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]
    
            # Is this a closed/new connection that requires CONNECT tunnelling?
            if self.proxy is not None and http_tunnel_required and conn.is_closed:
                try:
                    self._prepare_proxy(conn)
                except (BaseSSLError, OSError, SocketTimeout) as e:
                    self._raise_timeout(
                        err=e, url=self.proxy.url, timeout_value=conn.timeout
                    )
                    raise
    
            # If we're going to release the connection in ``finally:``, then
            # the response doesn't need to know about the connection. Otherwise
            # it will also try to release it and we'll have a double-release
            # mess.
            response_conn = conn if not release_conn else None
    
            # Make the request on the HTTPConnection object
&gt;           response = self._make_request(
                conn,
                method,
                url,
                timeout=timeout_obj,
                body=body,
                headers=headers,
                chunked=chunked,
                retries=retries,
                response_conn=response_conn,
                preload_content=preload_content,
                decode_content=decode_content,
                **response_kw,
            )

myenv/lib/python3.12/site-packages/urllib3/connectionpool.py:789: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
myenv/lib/python3.12/site-packages/urllib3/connectionpool.py:495: in _make_request
    conn.request(
myenv/lib/python3.12/site-packages/urllib3/connection.py:441: in request
    self.endheaders()
/usr/lib/python3.12/http/client.py:1331: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
/usr/lib/python3.12/http/client.py:1091: in _send_output
    self.send(msg)
/usr/lib/python3.12/http/client.py:1035: in send
    self.connect()
myenv/lib/python3.12/site-packages/urllib3/connection.py:279: in connect
    self.sock = self._new_conn()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;urllib3.connection.HTTPConnection object at 0x7f6149c9ab40&gt;

    def _new_conn(self) -&gt; socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
            sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )
        except socket.gaierror as e:
            raise NameResolutionError(self.host, self, e) from e
        except SocketTimeout as e:
            raise ConnectTimeoutError(
                self,
                f"Connection to {self.host} timed out. (connect timeout={self.timeout})",
            ) from e
    
        except OSError as e:
&gt;           raise NewConnectionError(
                self, f"Failed to establish a new connection: {e}"
            ) from e
E           urllib3.exceptions.NewConnectionError: &lt;urllib3.connection.HTTPConnection object at 0x7f6149c9ab40&gt;: Failed to establish a new connection: [Errno 113] No route to host

myenv/lib/python3.12/site-packages/urllib3/connection.py:214: NewConnectionError

The above exception was the direct cause of the following exception:

self = &lt;requests.adapters.HTTPAdapter object at 0x7f6149c9b200&gt;, request = &lt;PreparedRequest [GET]&gt;, stream = False, timeout = Timeout(connect=0.1, read=None, total=None)
verify = True, cert = None, proxies = OrderedDict()

    def send(
        self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None
    ):
        """Sends PreparedRequest object. Returns Response object.
    
        :param request: The :class:`PreparedRequest &lt;PreparedRequest&gt;` being sent.
        :param stream: (optional) Whether to stream the request content.
        :param timeout: (optional) How long to wait for the server to send
            data before giving up, as a float, or a :ref:`(connect timeout,
            read timeout) &lt;timeouts&gt;` tuple.
        :type timeout: float or tuple or urllib3 Timeout object
        :param verify: (optional) Either a boolean, in which case it controls whether
            we verify the server's TLS certificate, or a string, in which case it
            must be a path to a CA bundle to use
        :param cert: (optional) Any user-provided SSL certificate to be trusted.
        :param proxies: (optional) The proxies dictionary to apply to the request.
        :rtype: requests.Response
        """
    
        try:
            conn = self.get_connection_with_tls_context(
                request, verify, proxies=proxies, cert=cert
            )
        except LocationValueError as e:
            raise InvalidURL(e, request=request)
    
        self.cert_verify(conn, request.url, verify, cert)
        url = self.request_url(request, proxies)
        self.add_headers(
            request,
            stream=stream,
            timeout=timeout,
            verify=verify,
            cert=cert,
            proxies=proxies,
        )
    
        chunked = not (request.body is None or "Content-Length" in request.headers)
    
        if isinstance(timeout, tuple):
            try:
                connect, read = timeout
                timeout = TimeoutSauce(connect=connect, read=read)
            except ValueError:
                raise ValueError(
                    f"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, "
                    f"or a single float to set both timeouts to the same value."
                )
        elif isinstance(timeout, TimeoutSauce):
            pass
        else:
            timeout = TimeoutSauce(connect=timeout, read=timeout)
    
        try:
&gt;           resp = conn.urlopen(
                method=request.method,
                url=url,
                body=request.body,
                headers=request.headers,
                redirect=False,
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                retries=self.max_retries,
                timeout=timeout,
                chunked=chunked,
            )

src/requests/adapters.py:667: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
myenv/lib/python3.12/site-packages/urllib3/connectionpool.py:843: in urlopen
    retries = retries.increment(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = Retry(total=0, connect=None, read=False, redirect=None, status=None), method = 'GET', url = '/', response = None
error = NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7f6149c9ab40&gt;: Failed to establish a new connection: [Errno 113] No route to host')
_pool = &lt;urllib3.connectionpool.HTTPConnectionPool object at 0x7f6149c98dd0&gt;, _stacktrace = &lt;traceback object at 0x7f6149e8cf40&gt;

    def increment(
        self,
        method: str | None = None,
        url: str | None = None,
        response: BaseHTTPResponse | None = None,
        error: Exception | None = None,
        _pool: ConnectionPool | None = None,
        _stacktrace: TracebackType | None = None,
    ) -&gt; Self:
        """Return a new Retry object with incremented retry counters.
    
        :param response: A response object, or None, if the server did not
            return a response.
        :type response: :class:`~urllib3.response.BaseHTTPResponse`
        :param Exception error: An error encountered during the request, or
            None if the response was received successfully.
    
        :return: A new ``Retry`` object.
        """
        if self.total is False and error:
            # Disabled, indicate to re-raise the error.
            raise reraise(type(error), error, _stacktrace)
    
        total = self.total
        if total is not None:
            total -= 1
    
        connect = self.connect
        read = self.read
        redirect = self.redirect
        status_count = self.status
        other = self.other
        cause = "unknown"
        status = None
        redirect_location = None
    
        if error and self._is_connection_error(error):
            # Connect retry?
            if connect is False:
                raise reraise(type(error), error, _stacktrace)
            elif connect is not None:
                connect -= 1
    
        elif error and self._is_read_error(error):
            # Read retry?
            if read is False or method is None or not self._is_method_retryable(method):
                raise reraise(type(error), error, _stacktrace)
            elif read is not None:
                read -= 1
    
        elif error:
            # Other retry?
            if other is not None:
                other -= 1
    
        elif response and response.get_redirect_location():
            # Redirect retry?
            if redirect is not None:
                redirect -= 1
            cause = "too many redirects"
            response_redirect_location = response.get_redirect_location()
            if response_redirect_location:
                redirect_location = response_redirect_location
            status = response.status
    
        else:
            # Incrementing because of a server error like a 500 in
            # status_forcelist and the given method is in the allowed_methods
            cause = ResponseError.GENERIC_ERROR
            if response and response.status:
                if status_count is not None:
                    status_count -= 1
                cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)
                status = response.status
    
        history = self.history + (
            RequestHistory(method, url, error, status, redirect_location),
        )
    
        new_retry = self.new(
            total=total,
            connect=connect,
            read=read,
            redirect=redirect,
            status=status_count,
            other=other,
            history=history,
        )
    
        if new_retry.is_exhausted():
            reason = error or ResponseError(cause)
&gt;           raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]
E           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='10.255.255.1', port=80): Max retries exceeded with url: / (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7f6149c9ab40&gt;: Failed to establish a new connection: [Errno 113] No route to host'))

myenv/lib/python3.12/site-packages/urllib3/util/retry.py:519: MaxRetryError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_requests.TestTimeout object at 0x7f6149ead550&gt;, timeout = Timeout(connect=0.1, read=None, total=None)

    @pytest.mark.parametrize(
        "timeout", ((0.1, None), Urllib3Timeout(connect=0.1, read=None))
    )
    def test_connect_timeout(self, timeout):
        try:
&gt;           requests.get(TARPIT, timeout=timeout)

tests/test_requests.py:2473: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/requests/api.py:73: in get
    return request("get", url, params=params, **kwargs)
src/requests/api.py:59: in request
    return session.request(method=method, url=url, **kwargs)
src/requests/sessions.py:589: in request
    resp = self.send(prep, **send_kwargs)
src/requests/sessions.py:703: in send
    r = adapter.send(request, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;requests.adapters.HTTPAdapter object at 0x7f6149c9b200&gt;, request = &lt;PreparedRequest [GET]&gt;, stream = False, timeout = Timeout(connect=0.1, read=None, total=None)
verify = True, cert = None, proxies = OrderedDict()

    def send(
        self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None
    ):
        """Sends PreparedRequest object. Returns Response object.
    
        :param request: The :class:`PreparedRequest &lt;PreparedRequest&gt;` being sent.
        :param stream: (optional) Whether to stream the request content.
        :param timeout: (optional) How long to wait for the server to send
            data before giving up, as a float, or a :ref:`(connect timeout,
            read timeout) &lt;timeouts&gt;` tuple.
        :type timeout: float or tuple or urllib3 Timeout object
        :param verify: (optional) Either a boolean, in which case it controls whether
            we verify the server's TLS certificate, or a string, in which case it
            must be a path to a CA bundle to use
        :param cert: (optional) Any user-provided SSL certificate to be trusted.
        :param proxies: (optional) The proxies dictionary to apply to the request.
        :rtype: requests.Response
        """
    
        try:
            conn = self.get_connection_with_tls_context(
                request, verify, proxies=proxies, cert=cert
            )
        except LocationValueError as e:
            raise InvalidURL(e, request=request)
    
        self.cert_verify(conn, request.url, verify, cert)
        url = self.request_url(request, proxies)
        self.add_headers(
            request,
            stream=stream,
            timeout=timeout,
            verify=verify,
            cert=cert,
            proxies=proxies,
        )
    
        chunked = not (request.body is None or "Content-Length" in request.headers)
    
        if isinstance(timeout, tuple):
            try:
                connect, read = timeout
                timeout = TimeoutSauce(connect=connect, read=read)
            except ValueError:
                raise ValueError(
                    f"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, "
                    f"or a single float to set both timeouts to the same value."
                )
        elif isinstance(timeout, TimeoutSauce):
            pass
        else:
            timeout = TimeoutSauce(connect=timeout, read=timeout)
    
        try:
            resp = conn.urlopen(
                method=request.method,
                url=url,
                body=request.body,
                headers=request.headers,
                redirect=False,
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                retries=self.max_retries,
                timeout=timeout,
                chunked=chunked,
            )
    
        except (ProtocolError, OSError) as err:
            raise ConnectionError(err, request=request)
    
        except MaxRetryError as e:
            if isinstance(e.reason, ConnectTimeoutError):
                # TODO: Remove this in 3.0.0: see #2811
                if not isinstance(e.reason, NewConnectionError):
                    raise ConnectTimeout(e, request=request)
    
            if isinstance(e.reason, ResponseError):
                raise RetryError(e, request=request)
    
            if isinstance(e.reason, _ProxyError):
                raise ProxyError(e, request=request)
    
            if isinstance(e.reason, _SSLError):
                # This branch is for urllib3 v1.22 and later.
                raise SSLError(e, request=request)
    
&gt;           raise ConnectionError(e, request=request)
E           requests.exceptions.ConnectionError: HTTPConnectionPool(host='10.255.255.1', port=80): Max retries exceeded with url: / (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7f6149c9ab40&gt;: Failed to establish a new connection: [Errno 113] No route to host'))

src/requests/adapters.py:700: ConnectionError</failure></testcase><testcase classname="tests.test_requests.TestTimeout" name="test_total_timeout_connect[timeout0]" time="0.104" /><testcase classname="tests.test_requests.TestTimeout" name="test_total_timeout_connect[timeout1]" time="0.011"><failure message="requests.exceptions.ConnectionError: HTTPConnectionPool(host='10.255.255.1', port=80): Max retries exceeded with url: / (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7f6148f78980&gt;: Failed to establish a new connection: [Errno 113] No route to host'))">self = &lt;urllib3.connection.HTTPConnection object at 0x7f6148f78980&gt;

    def _new_conn(self) -&gt; socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
&gt;           sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )

myenv/lib/python3.12/site-packages/urllib3/connection.py:199: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
myenv/lib/python3.12/site-packages/urllib3/util/connection.py:85: in create_connection
    raise err
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

address = ('10.255.255.1', 80), timeout = 0.1, source_address = None, socket_options = [(6, 1, 1)]

    def create_connection(
        address: tuple[str, int],
        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,
        source_address: tuple[str, int] | None = None,
        socket_options: _TYPE_SOCKET_OPTIONS | None = None,
    ) -&gt; socket.socket:
        """Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`socket.getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of '' or port 0 tells the OS to use the default.
        """
    
        host, port = address
        if host.startswith("["):
            host = host.strip("[]")
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        try:
            host.encode("idna")
        except UnicodeError:
            raise LocationParseError(f"'{host}', label empty or too long") from None
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not _DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
&gt;               sock.connect(sa)
E               OSError: [Errno 113] No route to host

myenv/lib/python3.12/site-packages/urllib3/util/connection.py:73: OSError

The above exception was the direct cause of the following exception:

self = &lt;urllib3.connectionpool.HTTPConnectionPool object at 0x7f6148f784a0&gt;, method = 'GET', url = '/', body = None
headers = {'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate, br', 'Accept': '*/*', 'Connection': 'keep-alive'}
retries = Retry(total=0, connect=None, read=False, redirect=None, status=None), redirect = False, assert_same_host = False
timeout = Timeout(connect=0.1, read=0.1, total=None), pool_timeout = None, release_conn = False, chunked = False, body_pos = None, preload_content = False
decode_content = False, response_kw = {}, parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/', query=None, fragment=None), destination_scheme = None
conn = None, release_this_conn = True, http_tunnel_required = False, err = None, clean_exit = False

    def urlopen(  # type: ignore[override]
        self,
        method: str,
        url: str,
        body: _TYPE_BODY | None = None,
        headers: typing.Mapping[str, str] | None = None,
        retries: Retry | bool | int | None = None,
        redirect: bool = True,
        assert_same_host: bool = True,
        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,
        pool_timeout: int | None = None,
        release_conn: bool | None = None,
        chunked: bool = False,
        body_pos: _TYPE_BODY_POSITION | None = None,
        preload_content: bool = True,
        decode_content: bool = True,
        **response_kw: typing.Any,
    ) -&gt; BaseHTTPResponse:
        """
        Get a connection from the pool and perform an HTTP request. This is the
        lowest level call for making a request, so you'll need to specify all
        the raw details.
    
        .. note::
    
           More commonly, it's appropriate to use a convenience method
           such as :meth:`request`.
    
        .. note::
    
           `release_conn` will only behave as expected if
           `preload_content=False` because we want to make
           `preload_content=False` the default behaviour someday soon without
           breaking backwards compatibility.
    
        :param method:
            HTTP request method (such as GET, POST, PUT, etc.)
    
        :param url:
            The URL to perform the request on.
    
        :param body:
            Data to send in the request body, either :class:`str`, :class:`bytes`,
            an iterable of :class:`str`/:class:`bytes`, or a file-like object.
    
        :param headers:
            Dictionary of custom headers to send, such as User-Agent,
            If-None-Match, etc. If None, pool headers are used. If provided,
            these headers completely replace any pool-specific headers.
    
        :param retries:
            Configure the number of retries to allow before raising a
            :class:`~urllib3.exceptions.MaxRetryError` exception.
    
            If ``None`` (default) will retry 3 times, see ``Retry.DEFAULT``. Pass a
            :class:`~urllib3.util.retry.Retry` object for fine-grained control
            over different types of retries.
            Pass an integer number to retry connection errors that many times,
            but no other types of errors. Pass zero to never retry.
    
            If ``False``, then retries are disabled and any exception is raised
            immediately. Also, instead of raising a MaxRetryError on redirects,
            the redirect response will be returned.
    
        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.
    
        :param redirect:
            If True, automatically handle redirects (status codes 301, 302,
            303, 307, 308). Each redirect counts as a retry. Disabling retries
            will disable redirect, too.
    
        :param assert_same_host:
            If ``True``, will make sure that the host of the pool requests is
            consistent else will raise HostChangedError. When ``False``, you can
            use the pool on an HTTP proxy and request foreign hosts.
    
        :param timeout:
            If specified, overrides the default timeout for this one
            request. It may be a float (in seconds) or an instance of
            :class:`urllib3.util.Timeout`.
    
        :param pool_timeout:
            If set and the pool is set to block=True, then this method will
            block for ``pool_timeout`` seconds and raise EmptyPoolError if no
            connection is available within the time period.
    
        :param bool preload_content:
            If True, the response's body will be preloaded into memory.
    
        :param bool decode_content:
            If True, will attempt to decode the body based on the
            'content-encoding' header.
    
        :param release_conn:
            If False, then the urlopen call will not release the connection
            back into the pool once a response is received (but will release if
            you read the entire contents of the response such as when
            `preload_content=True`). This is useful if you're not preloading
            the response's content immediately. You will need to call
            ``r.release_conn()`` on the response ``r`` to return the connection
            back into the pool. If None, it takes the value of ``preload_content``
            which defaults to ``True``.
    
        :param bool chunked:
            If True, urllib3 will send the body using chunked transfer
            encoding. Otherwise, urllib3 will send the body using the standard
            content-length form. Defaults to False.
    
        :param int body_pos:
            Position to seek to in file-like body in the event of a retry or
            redirect. Typically this won't need to be set because urllib3 will
            auto-populate the value when needed.
        """
        parsed_url = parse_url(url)
        destination_scheme = parsed_url.scheme
    
        if headers is None:
            headers = self.headers
    
        if not isinstance(retries, Retry):
            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)
    
        if release_conn is None:
            release_conn = preload_content
    
        # Check host
        if assert_same_host and not self.is_same_host(url):
            raise HostChangedError(self, url, retries)
    
        # Ensure that the URL we're connecting to is properly encoded
        if url.startswith("/"):
            url = to_str(_encode_target(url))
        else:
            url = to_str(parsed_url.url)
    
        conn = None
    
        # Track whether `conn` needs to be released before
        # returning/raising/recursing. Update this variable if necessary, and
        # leave `release_conn` constant throughout the function. That way, if
        # the function recurses, the original value of `release_conn` will be
        # passed down into the recursive call, and its value will be respected.
        #
        # See issue #651 [1] for details.
        #
        # [1] &lt;https://github.com/urllib3/urllib3/issues/651&gt;
        release_this_conn = release_conn
    
        http_tunnel_required = connection_requires_http_tunnel(
            self.proxy, self.proxy_config, destination_scheme
        )
    
        # Merge the proxy headers. Only done when not using HTTP CONNECT. We
        # have to copy the headers dict so we can safely change it without those
        # changes being reflected in anyone else's copy.
        if not http_tunnel_required:
            headers = headers.copy()  # type: ignore[attr-defined]
            headers.update(self.proxy_headers)  # type: ignore[union-attr]
    
        # Must keep the exception bound to a separate variable or else Python 3
        # complains about UnboundLocalError.
        err = None
    
        # Keep track of whether we cleanly exited the except block. This
        # ensures we do proper cleanup in finally.
        clean_exit = False
    
        # Rewind body position, if needed. Record current position
        # for future rewinds in the event of a redirect/retry.
        body_pos = set_file_position(body, body_pos)
    
        try:
            # Request a connection from the queue.
            timeout_obj = self._get_timeout(timeout)
            conn = self._get_conn(timeout=pool_timeout)
    
            conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]
    
            # Is this a closed/new connection that requires CONNECT tunnelling?
            if self.proxy is not None and http_tunnel_required and conn.is_closed:
                try:
                    self._prepare_proxy(conn)
                except (BaseSSLError, OSError, SocketTimeout) as e:
                    self._raise_timeout(
                        err=e, url=self.proxy.url, timeout_value=conn.timeout
                    )
                    raise
    
            # If we're going to release the connection in ``finally:``, then
            # the response doesn't need to know about the connection. Otherwise
            # it will also try to release it and we'll have a double-release
            # mess.
            response_conn = conn if not release_conn else None
    
            # Make the request on the HTTPConnection object
&gt;           response = self._make_request(
                conn,
                method,
                url,
                timeout=timeout_obj,
                body=body,
                headers=headers,
                chunked=chunked,
                retries=retries,
                response_conn=response_conn,
                preload_content=preload_content,
                decode_content=decode_content,
                **response_kw,
            )

myenv/lib/python3.12/site-packages/urllib3/connectionpool.py:789: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
myenv/lib/python3.12/site-packages/urllib3/connectionpool.py:495: in _make_request
    conn.request(
myenv/lib/python3.12/site-packages/urllib3/connection.py:441: in request
    self.endheaders()
/usr/lib/python3.12/http/client.py:1331: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
/usr/lib/python3.12/http/client.py:1091: in _send_output
    self.send(msg)
/usr/lib/python3.12/http/client.py:1035: in send
    self.connect()
myenv/lib/python3.12/site-packages/urllib3/connection.py:279: in connect
    self.sock = self._new_conn()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;urllib3.connection.HTTPConnection object at 0x7f6148f78980&gt;

    def _new_conn(self) -&gt; socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
            sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )
        except socket.gaierror as e:
            raise NameResolutionError(self.host, self, e) from e
        except SocketTimeout as e:
            raise ConnectTimeoutError(
                self,
                f"Connection to {self.host} timed out. (connect timeout={self.timeout})",
            ) from e
    
        except OSError as e:
&gt;           raise NewConnectionError(
                self, f"Failed to establish a new connection: {e}"
            ) from e
E           urllib3.exceptions.NewConnectionError: &lt;urllib3.connection.HTTPConnection object at 0x7f6148f78980&gt;: Failed to establish a new connection: [Errno 113] No route to host

myenv/lib/python3.12/site-packages/urllib3/connection.py:214: NewConnectionError

The above exception was the direct cause of the following exception:

self = &lt;requests.adapters.HTTPAdapter object at 0x7f6148f7af30&gt;, request = &lt;PreparedRequest [GET]&gt;, stream = False, timeout = Timeout(connect=0.1, read=0.1, total=None)
verify = True, cert = None, proxies = OrderedDict()

    def send(
        self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None
    ):
        """Sends PreparedRequest object. Returns Response object.
    
        :param request: The :class:`PreparedRequest &lt;PreparedRequest&gt;` being sent.
        :param stream: (optional) Whether to stream the request content.
        :param timeout: (optional) How long to wait for the server to send
            data before giving up, as a float, or a :ref:`(connect timeout,
            read timeout) &lt;timeouts&gt;` tuple.
        :type timeout: float or tuple or urllib3 Timeout object
        :param verify: (optional) Either a boolean, in which case it controls whether
            we verify the server's TLS certificate, or a string, in which case it
            must be a path to a CA bundle to use
        :param cert: (optional) Any user-provided SSL certificate to be trusted.
        :param proxies: (optional) The proxies dictionary to apply to the request.
        :rtype: requests.Response
        """
    
        try:
            conn = self.get_connection_with_tls_context(
                request, verify, proxies=proxies, cert=cert
            )
        except LocationValueError as e:
            raise InvalidURL(e, request=request)
    
        self.cert_verify(conn, request.url, verify, cert)
        url = self.request_url(request, proxies)
        self.add_headers(
            request,
            stream=stream,
            timeout=timeout,
            verify=verify,
            cert=cert,
            proxies=proxies,
        )
    
        chunked = not (request.body is None or "Content-Length" in request.headers)
    
        if isinstance(timeout, tuple):
            try:
                connect, read = timeout
                timeout = TimeoutSauce(connect=connect, read=read)
            except ValueError:
                raise ValueError(
                    f"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, "
                    f"or a single float to set both timeouts to the same value."
                )
        elif isinstance(timeout, TimeoutSauce):
            pass
        else:
            timeout = TimeoutSauce(connect=timeout, read=timeout)
    
        try:
&gt;           resp = conn.urlopen(
                method=request.method,
                url=url,
                body=request.body,
                headers=request.headers,
                redirect=False,
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                retries=self.max_retries,
                timeout=timeout,
                chunked=chunked,
            )

src/requests/adapters.py:667: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
myenv/lib/python3.12/site-packages/urllib3/connectionpool.py:843: in urlopen
    retries = retries.increment(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = Retry(total=0, connect=None, read=False, redirect=None, status=None), method = 'GET', url = '/', response = None
error = NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7f6148f78980&gt;: Failed to establish a new connection: [Errno 113] No route to host')
_pool = &lt;urllib3.connectionpool.HTTPConnectionPool object at 0x7f6148f784a0&gt;, _stacktrace = &lt;traceback object at 0x7f61498dc640&gt;

    def increment(
        self,
        method: str | None = None,
        url: str | None = None,
        response: BaseHTTPResponse | None = None,
        error: Exception | None = None,
        _pool: ConnectionPool | None = None,
        _stacktrace: TracebackType | None = None,
    ) -&gt; Self:
        """Return a new Retry object with incremented retry counters.
    
        :param response: A response object, or None, if the server did not
            return a response.
        :type response: :class:`~urllib3.response.BaseHTTPResponse`
        :param Exception error: An error encountered during the request, or
            None if the response was received successfully.
    
        :return: A new ``Retry`` object.
        """
        if self.total is False and error:
            # Disabled, indicate to re-raise the error.
            raise reraise(type(error), error, _stacktrace)
    
        total = self.total
        if total is not None:
            total -= 1
    
        connect = self.connect
        read = self.read
        redirect = self.redirect
        status_count = self.status
        other = self.other
        cause = "unknown"
        status = None
        redirect_location = None
    
        if error and self._is_connection_error(error):
            # Connect retry?
            if connect is False:
                raise reraise(type(error), error, _stacktrace)
            elif connect is not None:
                connect -= 1
    
        elif error and self._is_read_error(error):
            # Read retry?
            if read is False or method is None or not self._is_method_retryable(method):
                raise reraise(type(error), error, _stacktrace)
            elif read is not None:
                read -= 1
    
        elif error:
            # Other retry?
            if other is not None:
                other -= 1
    
        elif response and response.get_redirect_location():
            # Redirect retry?
            if redirect is not None:
                redirect -= 1
            cause = "too many redirects"
            response_redirect_location = response.get_redirect_location()
            if response_redirect_location:
                redirect_location = response_redirect_location
            status = response.status
    
        else:
            # Incrementing because of a server error like a 500 in
            # status_forcelist and the given method is in the allowed_methods
            cause = ResponseError.GENERIC_ERROR
            if response and response.status:
                if status_count is not None:
                    status_count -= 1
                cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)
                status = response.status
    
        history = self.history + (
            RequestHistory(method, url, error, status, redirect_location),
        )
    
        new_retry = self.new(
            total=total,
            connect=connect,
            read=read,
            redirect=redirect,
            status=status_count,
            other=other,
            history=history,
        )
    
        if new_retry.is_exhausted():
            reason = error or ResponseError(cause)
&gt;           raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]
E           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='10.255.255.1', port=80): Max retries exceeded with url: / (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7f6148f78980&gt;: Failed to establish a new connection: [Errno 113] No route to host'))

myenv/lib/python3.12/site-packages/urllib3/util/retry.py:519: MaxRetryError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_requests.TestTimeout object at 0x7f6149eae030&gt;, timeout = Timeout(connect=0.1, read=0.1, total=None)

    @pytest.mark.parametrize(
        "timeout", ((0.1, 0.1), Urllib3Timeout(connect=0.1, read=0.1))
    )
    def test_total_timeout_connect(self, timeout):
        try:
&gt;           requests.get(TARPIT, timeout=timeout)

tests/test_requests.py:2484: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/requests/api.py:73: in get
    return request("get", url, params=params, **kwargs)
src/requests/api.py:59: in request
    return session.request(method=method, url=url, **kwargs)
src/requests/sessions.py:589: in request
    resp = self.send(prep, **send_kwargs)
src/requests/sessions.py:703: in send
    r = adapter.send(request, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;requests.adapters.HTTPAdapter object at 0x7f6148f7af30&gt;, request = &lt;PreparedRequest [GET]&gt;, stream = False, timeout = Timeout(connect=0.1, read=0.1, total=None)
verify = True, cert = None, proxies = OrderedDict()

    def send(
        self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None
    ):
        """Sends PreparedRequest object. Returns Response object.
    
        :param request: The :class:`PreparedRequest &lt;PreparedRequest&gt;` being sent.
        :param stream: (optional) Whether to stream the request content.
        :param timeout: (optional) How long to wait for the server to send
            data before giving up, as a float, or a :ref:`(connect timeout,
            read timeout) &lt;timeouts&gt;` tuple.
        :type timeout: float or tuple or urllib3 Timeout object
        :param verify: (optional) Either a boolean, in which case it controls whether
            we verify the server's TLS certificate, or a string, in which case it
            must be a path to a CA bundle to use
        :param cert: (optional) Any user-provided SSL certificate to be trusted.
        :param proxies: (optional) The proxies dictionary to apply to the request.
        :rtype: requests.Response
        """
    
        try:
            conn = self.get_connection_with_tls_context(
                request, verify, proxies=proxies, cert=cert
            )
        except LocationValueError as e:
            raise InvalidURL(e, request=request)
    
        self.cert_verify(conn, request.url, verify, cert)
        url = self.request_url(request, proxies)
        self.add_headers(
            request,
            stream=stream,
            timeout=timeout,
            verify=verify,
            cert=cert,
            proxies=proxies,
        )
    
        chunked = not (request.body is None or "Content-Length" in request.headers)
    
        if isinstance(timeout, tuple):
            try:
                connect, read = timeout
                timeout = TimeoutSauce(connect=connect, read=read)
            except ValueError:
                raise ValueError(
                    f"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, "
                    f"or a single float to set both timeouts to the same value."
                )
        elif isinstance(timeout, TimeoutSauce):
            pass
        else:
            timeout = TimeoutSauce(connect=timeout, read=timeout)
    
        try:
            resp = conn.urlopen(
                method=request.method,
                url=url,
                body=request.body,
                headers=request.headers,
                redirect=False,
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                retries=self.max_retries,
                timeout=timeout,
                chunked=chunked,
            )
    
        except (ProtocolError, OSError) as err:
            raise ConnectionError(err, request=request)
    
        except MaxRetryError as e:
            if isinstance(e.reason, ConnectTimeoutError):
                # TODO: Remove this in 3.0.0: see #2811
                if not isinstance(e.reason, NewConnectionError):
                    raise ConnectTimeout(e, request=request)
    
            if isinstance(e.reason, ResponseError):
                raise RetryError(e, request=request)
    
            if isinstance(e.reason, _ProxyError):
                raise ProxyError(e, request=request)
    
            if isinstance(e.reason, _SSLError):
                # This branch is for urllib3 v1.22 and later.
                raise SSLError(e, request=request)
    
&gt;           raise ConnectionError(e, request=request)
E           requests.exceptions.ConnectionError: HTTPConnectionPool(host='10.255.255.1', port=80): Max retries exceeded with url: / (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7f6148f78980&gt;: Failed to establish a new connection: [Errno 113] No route to host'))

src/requests/adapters.py:700: ConnectionError</failure></testcase><testcase classname="tests.test_requests.TestTimeout" name="test_encoded_methods" time="17.862" /><testcase classname="tests.test_requests" name="test_json_encodes_as_bytes" time="0.001" /><testcase classname="tests.test_requests" name="test_requests_are_updated_each_time" time="0.002" /><testcase classname="tests.test_requests" name="test_proxy_env_vars_override_default[http_proxy-http://example.com-socks5://proxy.com:9876]" time="0.002" /><testcase classname="tests.test_requests" name="test_proxy_env_vars_override_default[https_proxy-https://example.com-socks5://proxy.com:9876]" time="0.001" /><testcase classname="tests.test_requests" name="test_proxy_env_vars_override_default[all_proxy-http://example.com-socks5://proxy.com:9876]" time="0.001" /><testcase classname="tests.test_requests" name="test_proxy_env_vars_override_default[all_proxy-https://example.com-socks5://proxy.com:9876]" time="0.004" /><testcase classname="tests.test_requests" name="test_data_argument_accepts_tuples[data0]" time="0.001" /><testcase classname="tests.test_requests" name="test_data_argument_accepts_tuples[data1]" time="0.001" /><testcase classname="tests.test_requests" name="test_data_argument_accepts_tuples[data2]" time="0.001" /><testcase classname="tests.test_requests" name="test_prepared_copy[None]" time="0.001" /><testcase classname="tests.test_requests" name="test_prepared_copy[kwargs1]" time="0.001" /><testcase classname="tests.test_requests" name="test_prepared_copy[kwargs2]" time="0.002" /><testcase classname="tests.test_requests" name="test_prepared_copy[kwargs3]" time="0.002" /><testcase classname="tests.test_requests" name="test_urllib3_retries" time="0.007" /><testcase classname="tests.test_requests" name="test_urllib3_pool_connection_closed" time="0.006" /><testcase classname="tests.test_requests.TestPreparingURLs" name="test_preparing_url[http://google.com-http://google.com/]" time="0.002" /><testcase classname="tests.test_requests.TestPreparingURLs" name="test_preparing_url[http://\u30b8\u30a7\u30fc\u30d4\u30fc\u30cb\u30c3\u30af.jp-http://xn--hckqz9bzb1cyrb.jp/]" time="0.004" /><testcase classname="tests.test_requests.TestPreparingURLs" name="test_preparing_url[http://xn--n3h.net/-http://xn--n3h.net/0]" time="0.001" /><testcase classname="tests.test_requests.TestPreparingURLs" name="test_preparing_url[http://\xe3\x82\xb8\xe3\x82\xa7\xe3\x83\xbc\xe3\x83\x94\xe3\x83\xbc\xe3\x83\x8b\xe3\x83\x83\xe3\x82\xaf.jp-http://xn--hckqz9bzb1cyrb.jp/]" time="0.002" /><testcase classname="tests.test_requests.TestPreparingURLs" name="test_preparing_url[http://stra\xdfe.de/stra\xdfe-http://xn--strae-oqa.de/stra%C3%9Fe]" time="0.001" /><testcase classname="tests.test_requests.TestPreparingURLs" name="test_preparing_url[http://stra\xc3\x9fe.de/stra\xc3\x9fe-http://xn--strae-oqa.de/stra%C3%9Fe]" time="0.001" /><testcase classname="tests.test_requests.TestPreparingURLs" name="test_preparing_url[http://K\xf6nigsg\xe4\xdfchen.de/stra\xdfe-http://xn--knigsgchen-b4a3dun.de/stra%C3%9Fe]" time="0.001" /><testcase classname="tests.test_requests.TestPreparingURLs" name="test_preparing_url[http://K\xc3\xb6nigsg\xc3\xa4\xc3\x9fchen.de/stra\xc3\x9fe-http://xn--knigsgchen-b4a3dun.de/stra%C3%9Fe]" time="0.001" /><testcase classname="tests.test_requests.TestPreparingURLs" name="test_preparing_url[http://xn--n3h.net/-http://xn--n3h.net/1]" time="0.002" /><testcase classname="tests.test_requests.TestPreparingURLs" name="test_preparing_url[http://[1200:0000:ab00:1234:0000:2552:7777:1313]:12345/-http://[1200:0000:ab00:1234:0000:2552:7777:1313]:12345/0]" time="0.001" /><testcase classname="tests.test_requests.TestPreparingURLs" name="test_preparing_url[http://[1200:0000:ab00:1234:0000:2552:7777:1313]:12345/-http://[1200:0000:ab00:1234:0000:2552:7777:1313]:12345/1]" time="0.001" /><testcase classname="tests.test_requests.TestPreparingURLs" name="test_preparing_bad_url[http://*.google.com0]" time="0.000" /><testcase classname="tests.test_requests.TestPreparingURLs" name="test_preparing_bad_url[http://*0]" time="0.000" /><testcase classname="tests.test_requests.TestPreparingURLs" name="test_preparing_bad_url[http://*.google.com1]" time="0.002" /><testcase classname="tests.test_requests.TestPreparingURLs" name="test_preparing_bad_url[http://*1]" time="0.002" /><testcase classname="tests.test_requests.TestPreparingURLs" name="test_preparing_bad_url[http://\u2603.net/]" time="0.001" /><testcase classname="tests.test_requests.TestPreparingURLs" name="test_redirecting_to_bad_url[http://:1-InvalidURL]" time="0.002" /><testcase classname="tests.test_requests.TestPreparingURLs" name="test_url_mutation[http+unix://%2Fvar%2Frun%2Fsocket/path%7E-http+unix://%2Fvar%2Frun%2Fsocket/path~0]" time="0.002" /><testcase classname="tests.test_requests.TestPreparingURLs" name="test_url_mutation[http+unix://%2Fvar%2Frun%2Fsocket/path%7E-http+unix://%2Fvar%2Frun%2Fsocket/path~1]" time="0.001" /><testcase classname="tests.test_requests.TestPreparingURLs" name="test_url_mutation[mailto:user@example.org-mailto:user@example.org0]" time="0.001" /><testcase classname="tests.test_requests.TestPreparingURLs" name="test_url_mutation[mailto:user@example.org-mailto:user@example.org1]" time="0.000" /><testcase classname="tests.test_requests.TestPreparingURLs" name="test_url_mutation[data:SSDimaUgUHl0aG9uIQ==-data:SSDimaUgUHl0aG9uIQ==]" time="0.000" /><testcase classname="tests.test_requests.TestPreparingURLs" name="test_parameters_for_nonstandard_schemes[http+unix://%2Fvar%2Frun%2Fsocket/path-params0-http+unix://%2Fvar%2Frun%2Fsocket/path?key=value]" time="0.001" /><testcase classname="tests.test_requests.TestPreparingURLs" name="test_parameters_for_nonstandard_schemes[http+unix://%2Fvar%2Frun%2Fsocket/path-params1-http+unix://%2Fvar%2Frun%2Fsocket/path?key=value]" time="0.001" /><testcase classname="tests.test_requests.TestPreparingURLs" name="test_parameters_for_nonstandard_schemes[mailto:user@example.org-params2-mailto:user@example.org]" time="0.001" /><testcase classname="tests.test_requests.TestPreparingURLs" name="test_parameters_for_nonstandard_schemes[mailto:user@example.org-params3-mailto:user@example.org]" time="0.000" /><testcase classname="tests.test_requests.TestPreparingURLs" name="test_post_json_nan" time="0.002" /><testcase classname="tests.test_requests.TestPreparingURLs" name="test_json_decode_compatibility" time="0.006" /><testcase classname="tests.test_requests.TestPreparingURLs" name="test_json_decode_persists_doc_attr" time="0.013" /><testcase classname="tests.test_requests.TestPreparingURLs" name="test_status_code_425" time="0.001" /><testcase classname="tests.test_requests.TestPreparingURLs" name="test_different_connection_pool_for_tls_settings_verify_True" time="0.556" /><testcase classname="tests.test_requests.TestPreparingURLs" name="test_different_connection_pool_for_tls_settings_verify_bundle_expired_cert" time="0.635" /><testcase classname="tests.test_requests.TestPreparingURLs" name="test_different_connection_pool_for_tls_settings_verify_bundle_unexpired_cert" time="6.146" /><testcase classname="tests.test_requests.TestPreparingURLs" name="test_different_connection_pool_for_mtls_settings" time="0.667" /><testcase classname="tests.test_requests" name="test_content_length_for_bytes_data" time="0.001" /><testcase classname="tests.test_requests" name="test_content_length_for_string_data_counts_bytes" time="0.002" /><testcase classname="tests.test_requests" name="test_json_decode_errors_are_serializable_deserializable" time="0.001" /><testcase classname="tests.test_structures.TestCaseInsensitiveDict" name="test_list" time="0.001" /><testcase classname="tests.test_structures.TestCaseInsensitiveDict" name="test_getitem[accept]" time="0.001" /><testcase classname="tests.test_structures.TestCaseInsensitiveDict" name="test_getitem[ACCEPT]" time="0.002" /><testcase classname="tests.test_structures.TestCaseInsensitiveDict" name="test_getitem[aCcEpT]" time="0.001" /><testcase classname="tests.test_structures.TestCaseInsensitiveDict" name="test_getitem[Accept]" time="0.001" /><testcase classname="tests.test_structures.TestCaseInsensitiveDict" name="test_delitem[accept]" time="0.001" /><testcase classname="tests.test_structures.TestCaseInsensitiveDict" name="test_delitem[ACCEPT]" time="0.001" /><testcase classname="tests.test_structures.TestCaseInsensitiveDict" name="test_delitem[aCcEpT]" time="0.000" /><testcase classname="tests.test_structures.TestCaseInsensitiveDict" name="test_delitem[Accept]" time="0.000" /><testcase classname="tests.test_structures.TestCaseInsensitiveDict" name="test_lower_items" time="0.001" /><testcase classname="tests.test_structures.TestCaseInsensitiveDict" name="test_repr" time="0.000" /><testcase classname="tests.test_structures.TestCaseInsensitiveDict" name="test_copy" time="0.001" /><testcase classname="tests.test_structures.TestCaseInsensitiveDict" name="test_instance_equality[other0-True]" time="0.003" /><testcase classname="tests.test_structures.TestCaseInsensitiveDict" name="test_instance_equality[other1-False]" time="0.001" /><testcase classname="tests.test_structures.TestCaseInsensitiveDict" name="test_instance_equality[None-False]" time="0.001" /><testcase classname="tests.test_structures.TestLookupDict" name="test_repr" time="0.001" /><testcase classname="tests.test_structures.TestLookupDict" name="test_getitem[bad_gateway-502]" time="0.000" /><testcase classname="tests.test_structures.TestLookupDict" name="test_getitem[not_a_key-None]" time="0.001" /><testcase classname="tests.test_structures.TestLookupDict" name="test_get[bad_gateway-502]" time="0.002" /><testcase classname="tests.test_structures.TestLookupDict" name="test_get[not_a_key-None]" time="0.001" /><testcase classname="tests.test_testserver.TestTestServer" name="test_basic" time="0.003" /><testcase classname="tests.test_testserver.TestTestServer" name="test_server_closes" time="0.002" /><testcase classname="tests.test_testserver.TestTestServer" name="test_text_response" time="0.505" /><testcase classname="tests.test_testserver.TestTestServer" name="test_basic_response" time="0.506" /><testcase classname="tests.test_testserver.TestTestServer" name="test_basic_waiting_server" time="2.502" /><testcase classname="tests.test_testserver.TestTestServer" name="test_multiple_requests" time="2.519" /><testcase classname="tests.test_testserver.TestTestServer" name="test_request_recovery" time="0.001"><skipped type="pytest.skip" message="this fails non-deterministically under pytest-xdist">/mnt/c/Users/start/new_requests/tests/test_testserver.py:94: this fails non-deterministically under pytest-xdist</skipped></testcase><testcase classname="tests.test_testserver.TestTestServer" name="test_requests_after_timeout_are_not_received" time="1.505" /><testcase classname="tests.test_testserver.TestTestServer" name="test_request_recovery_with_bigger_timeout" time="1.504" /><testcase classname="tests.test_testserver.TestTestServer" name="test_server_finishes_on_error" time="5.005" /><testcase classname="tests.test_testserver.TestTestServer" name="test_server_finishes_when_no_connections" time="5.010" /><testcase classname="tests.test_utils.TestSuperLen" name="test_io_streams[StringIO-Test]" time="0.001" /><testcase classname="tests.test_utils.TestSuperLen" name="test_io_streams[BytesIO-Test]" time="0.001" /><testcase classname="tests.test_utils.TestSuperLen" name="test_io_streams[None-Test]" time="0.001"><skipped type="pytest.skip" message="condition: cStringIO is None">/mnt/c/Users/start/new_requests/tests/test_utils.py:50: condition: cStringIO is None</skipped></testcase><testcase classname="tests.test_utils.TestSuperLen" name="test_super_len_correctly_calculates_len_of_partially_read_file" time="0.001" /><testcase classname="tests.test_utils.TestSuperLen" name="test_super_len_handles_files_raising_weird_errors_in_tell[OSError0]" time="0.001" /><testcase classname="tests.test_utils.TestSuperLen" name="test_super_len_handles_files_raising_weird_errors_in_tell[OSError1]" time="0.001" /><testcase classname="tests.test_utils.TestSuperLen" name="test_super_len_tell_ioerror[OSError0]" time="0.002" /><testcase classname="tests.test_utils.TestSuperLen" name="test_super_len_tell_ioerror[OSError1]" time="0.002" /><testcase classname="tests.test_utils.TestSuperLen" name="test_string" time="0.001" /><testcase classname="tests.test_utils.TestSuperLen" name="test_file[r-1]" time="0.032" /><testcase classname="tests.test_utils.TestSuperLen" name="test_file[rb-0]" time="0.003" /><testcase classname="tests.test_utils.TestSuperLen" name="test_tarfile_member" time="0.012" /><testcase classname="tests.test_utils.TestSuperLen" name="test_super_len_with__len__" time="0.001" /><testcase classname="tests.test_utils.TestSuperLen" name="test_super_len_with_no__len__" time="0.000" /><testcase classname="tests.test_utils.TestSuperLen" name="test_super_len_with_tell" time="0.001" /><testcase classname="tests.test_utils.TestSuperLen" name="test_super_len_with_fileno" time="0.007" /><testcase classname="tests.test_utils.TestSuperLen" name="test_super_len_with_no_matches" time="0.001" /><testcase classname="tests.test_utils.TestToKeyValList" name="test_valid[value0-expected0]" time="0.000" /><testcase classname="tests.test_utils.TestToKeyValList" name="test_valid[value1-expected1]" time="0.000" /><testcase classname="tests.test_utils.TestToKeyValList" name="test_valid[value2-expected2]" time="0.002" /><testcase classname="tests.test_utils.TestToKeyValList" name="test_valid[None-None]" time="0.000" /><testcase classname="tests.test_utils.TestToKeyValList" name="test_invalid" time="0.001" /><testcase classname="tests.test_utils.TestUnquoteHeaderValue" name="test_valid[None-None]" time="0.001" /><testcase classname="tests.test_utils.TestUnquoteHeaderValue" name="test_valid[Test-Test]" time="0.001" /><testcase classname="tests.test_utils.TestUnquoteHeaderValue" name="test_valid[&quot;Test&quot;-Test]" time="0.001" /><testcase classname="tests.test_utils.TestUnquoteHeaderValue" name="test_valid[&quot;Test\\\\&quot;-Test\\]" time="0.000" /><testcase classname="tests.test_utils.TestUnquoteHeaderValue" name="test_valid[&quot;\\\\Comp\\Res&quot;-\\Comp\\Res]" time="0.000" /><testcase classname="tests.test_utils.TestUnquoteHeaderValue" name="test_is_filename" time="0.001" /><testcase classname="tests.test_utils.TestGetEnvironProxies" name="test_bypass[no_proxy-http://192.168.0.1:5000/]" time="0.002" /><testcase classname="tests.test_utils.TestGetEnvironProxies" name="test_bypass[no_proxy-http://192.168.0.1/]" time="0.002" /><testcase classname="tests.test_utils.TestGetEnvironProxies" name="test_bypass[no_proxy-http://172.16.1.1/]" time="0.001" /><testcase classname="tests.test_utils.TestGetEnvironProxies" name="test_bypass[no_proxy-http://172.16.1.1:5000/]" time="0.001" /><testcase classname="tests.test_utils.TestGetEnvironProxies" name="test_bypass[no_proxy-http://localhost.localdomain:5000/v1.0/]" time="0.001" /><testcase classname="tests.test_utils.TestGetEnvironProxies" name="test_bypass[NO_PROXY-http://192.168.0.1:5000/]" time="0.001" /><testcase classname="tests.test_utils.TestGetEnvironProxies" name="test_bypass[NO_PROXY-http://192.168.0.1/]" time="0.001" /><testcase classname="tests.test_utils.TestGetEnvironProxies" name="test_bypass[NO_PROXY-http://172.16.1.1/]" time="0.001" /><testcase classname="tests.test_utils.TestGetEnvironProxies" name="test_bypass[NO_PROXY-http://172.16.1.1:5000/]" time="0.001" /><testcase classname="tests.test_utils.TestGetEnvironProxies" name="test_bypass[NO_PROXY-http://localhost.localdomain:5000/v1.0/]" time="0.001" /><testcase classname="tests.test_utils.TestGetEnvironProxies" name="test_not_bypass[no_proxy-http://192.168.1.1:5000/]" time="0.002" /><testcase classname="tests.test_utils.TestGetEnvironProxies" name="test_not_bypass[no_proxy-http://192.168.1.1/]" time="0.002" /><testcase classname="tests.test_utils.TestGetEnvironProxies" name="test_not_bypass[no_proxy-http://www.requests.com/]" time="0.002" /><testcase classname="tests.test_utils.TestGetEnvironProxies" name="test_not_bypass[NO_PROXY-http://192.168.1.1:5000/]" time="0.001" /><testcase classname="tests.test_utils.TestGetEnvironProxies" name="test_not_bypass[NO_PROXY-http://192.168.1.1/]" time="0.001" /><testcase classname="tests.test_utils.TestGetEnvironProxies" name="test_not_bypass[NO_PROXY-http://www.requests.com/]" time="0.002" /><testcase classname="tests.test_utils.TestGetEnvironProxies" name="test_bypass_no_proxy_keyword[no_proxy-http://192.168.1.1:5000/]" time="0.001" /><testcase classname="tests.test_utils.TestGetEnvironProxies" name="test_bypass_no_proxy_keyword[no_proxy-http://192.168.1.1/]" time="0.001" /><testcase classname="tests.test_utils.TestGetEnvironProxies" name="test_bypass_no_proxy_keyword[no_proxy-http://www.requests.com/]" time="0.001" /><testcase classname="tests.test_utils.TestGetEnvironProxies" name="test_bypass_no_proxy_keyword[NO_PROXY-http://192.168.1.1:5000/]" time="0.002" /><testcase classname="tests.test_utils.TestGetEnvironProxies" name="test_bypass_no_proxy_keyword[NO_PROXY-http://192.168.1.1/]" time="0.002" /><testcase classname="tests.test_utils.TestGetEnvironProxies" name="test_bypass_no_proxy_keyword[NO_PROXY-http://www.requests.com/]" time="0.002" /><testcase classname="tests.test_utils.TestGetEnvironProxies" name="test_not_bypass_no_proxy_keyword[no_proxy-http://192.168.0.1:5000/]" time="0.001" /><testcase classname="tests.test_utils.TestGetEnvironProxies" name="test_not_bypass_no_proxy_keyword[no_proxy-http://192.168.0.1/]" time="0.002" /><testcase classname="tests.test_utils.TestGetEnvironProxies" name="test_not_bypass_no_proxy_keyword[no_proxy-http://172.16.1.1/]" time="0.001" /><testcase classname="tests.test_utils.TestGetEnvironProxies" name="test_not_bypass_no_proxy_keyword[no_proxy-http://172.16.1.1:5000/]" time="0.001" /><testcase classname="tests.test_utils.TestGetEnvironProxies" name="test_not_bypass_no_proxy_keyword[no_proxy-http://localhost.localdomain:5000/v1.0/]" time="0.001" /><testcase classname="tests.test_utils.TestGetEnvironProxies" name="test_not_bypass_no_proxy_keyword[NO_PROXY-http://192.168.0.1:5000/]" time="0.001" /><testcase classname="tests.test_utils.TestGetEnvironProxies" name="test_not_bypass_no_proxy_keyword[NO_PROXY-http://192.168.0.1/]" time="0.001" /><testcase classname="tests.test_utils.TestGetEnvironProxies" name="test_not_bypass_no_proxy_keyword[NO_PROXY-http://172.16.1.1/]" time="0.001" /><testcase classname="tests.test_utils.TestGetEnvironProxies" name="test_not_bypass_no_proxy_keyword[NO_PROXY-http://172.16.1.1:5000/]" time="0.001" /><testcase classname="tests.test_utils.TestGetEnvironProxies" name="test_not_bypass_no_proxy_keyword[NO_PROXY-http://localhost.localdomain:5000/v1.0/]" time="0.001" /><testcase classname="tests.test_utils.TestIsIPv4Address" name="test_valid" time="0.001" /><testcase classname="tests.test_utils.TestIsIPv4Address" name="test_invalid[8.8.8.8.8]" time="0.001" /><testcase classname="tests.test_utils.TestIsIPv4Address" name="test_invalid[localhost.localdomain]" time="0.001" /><testcase classname="tests.test_utils.TestIsValidCIDR" name="test_valid" time="0.000" /><testcase classname="tests.test_utils.TestIsValidCIDR" name="test_invalid[8.8.8.8]" time="0.001" /><testcase classname="tests.test_utils.TestIsValidCIDR" name="test_invalid[192.168.1.0/a]" time="0.001" /><testcase classname="tests.test_utils.TestIsValidCIDR" name="test_invalid[192.168.1.0/128]" time="0.001" /><testcase classname="tests.test_utils.TestIsValidCIDR" name="test_invalid[192.168.1.0/-1]" time="0.000" /><testcase classname="tests.test_utils.TestIsValidCIDR" name="test_invalid[192.168.1.999/24]" time="0.001" /><testcase classname="tests.test_utils.TestAddressInNetwork" name="test_valid" time="0.001" /><testcase classname="tests.test_utils.TestAddressInNetwork" name="test_invalid" time="0.001" /><testcase classname="tests.test_utils.TestGuessFilename" name="test_guess_filename_invalid[1]" time="0.001" /><testcase classname="tests.test_utils.TestGuessFilename" name="test_guess_filename_invalid[value1]" time="0.001" /><testcase classname="tests.test_utils.TestGuessFilename" name="test_guess_filename_valid[value-bytes]" time="0.001" /><testcase classname="tests.test_utils.TestGuessFilename" name="test_guess_filename_valid[value-str]" time="0.001" /><testcase classname="tests.test_utils.TestExtractZippedPaths" name="test_unzipped_paths_unchanged[/]" time="0.001" /><testcase classname="tests.test_utils.TestExtractZippedPaths" name="test_unzipped_paths_unchanged[/mnt/c/Users/start/new_requests/tests/test_utils.py]" time="0.003" /><testcase classname="tests.test_utils.TestExtractZippedPaths" name="test_unzipped_paths_unchanged[/mnt/c/Users/start/new_requests/myenv/lib/python3.12/site-packages/pytest/__init__.py]" time="0.003" /><testcase classname="tests.test_utils.TestExtractZippedPaths" name="test_unzipped_paths_unchanged[/etc/invalid/location]" time="0.001" /><testcase classname="tests.test_utils.TestExtractZippedPaths" name="test_zipped_paths_extracted" time="0.024" /><testcase classname="tests.test_utils.TestExtractZippedPaths" name="test_invalid_unc_path" time="0.001" /><testcase classname="tests.test_utils.TestContentEncodingDetection" name="test_none" time="0.001" /><testcase classname="tests.test_utils.TestContentEncodingDetection" name="test_pragmas[&lt;meta charset=&quot;UTF-8&quot;&gt;]" time="0.000" /><testcase classname="tests.test_utils.TestContentEncodingDetection" name="test_pragmas[&lt;meta http-equiv=&quot;Content-type&quot; content=&quot;text/html;charset=UTF-8&quot;&gt;]" time="0.001" /><testcase classname="tests.test_utils.TestContentEncodingDetection" name="test_pragmas[&lt;meta http-equiv=&quot;Content-type&quot; content=&quot;text/html;charset=UTF-8&quot; /&gt;]" time="0.002" /><testcase classname="tests.test_utils.TestContentEncodingDetection" name="test_pragmas[&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;]" time="0.000" /><testcase classname="tests.test_utils.TestContentEncodingDetection" name="test_precedence" time="0.000" /><testcase classname="tests.test_utils.TestGuessJSONUTF" name="test_encoded[utf-32]" time="0.000" /><testcase classname="tests.test_utils.TestGuessJSONUTF" name="test_encoded[utf-8-sig]" time="0.004" /><testcase classname="tests.test_utils.TestGuessJSONUTF" name="test_encoded[utf-16]" time="0.001" /><testcase classname="tests.test_utils.TestGuessJSONUTF" name="test_encoded[utf-8]" time="0.000" /><testcase classname="tests.test_utils.TestGuessJSONUTF" name="test_encoded[utf-16-be]" time="0.001" /><testcase classname="tests.test_utils.TestGuessJSONUTF" name="test_encoded[utf-16-le]" time="0.001" /><testcase classname="tests.test_utils.TestGuessJSONUTF" name="test_encoded[utf-32-be]" time="0.002" /><testcase classname="tests.test_utils.TestGuessJSONUTF" name="test_encoded[utf-32-le]" time="0.001" /><testcase classname="tests.test_utils.TestGuessJSONUTF" name="test_bad_utf_like_encoding" time="0.001" /><testcase classname="tests.test_utils.TestGuessJSONUTF" name="test_guess_by_bom[utf-16-be-utf-16]" time="0.001" /><testcase classname="tests.test_utils.TestGuessJSONUTF" name="test_guess_by_bom[utf-16-le-utf-16]" time="0.001" /><testcase classname="tests.test_utils.TestGuessJSONUTF" name="test_guess_by_bom[utf-32-be-utf-32]" time="0.001" /><testcase classname="tests.test_utils.TestGuessJSONUTF" name="test_guess_by_bom[utf-32-le-utf-32]" time="0.001" /><testcase classname="tests.test_utils" name="test_get_auth_from_url[http://%25%21%2A%27%28%29%3B%3A%40%26%3D%2B%24%2C%2F%3F%23%5B%5D%20:%25%21%2A%27%28%29%3B%3A%40%26%3D%2B%24%2C%2F%3F%23%5B%5D%20@request.com/url.html#test-auth0]" time="0.000" /><testcase classname="tests.test_utils" name="test_get_auth_from_url[http://user:pass@complex.url.com/path?query=yes-auth1]" time="0.001" /><testcase classname="tests.test_utils" name="test_get_auth_from_url[http://user:pass%20pass@complex.url.com/path?query=yes-auth2]" time="0.001" /><testcase classname="tests.test_utils" name="test_get_auth_from_url[http://user:pass pass@complex.url.com/path?query=yes-auth3]" time="0.000" /><testcase classname="tests.test_utils" name="test_get_auth_from_url[http://user%25user:pass@complex.url.com/path?query=yes-auth4]" time="0.000" /><testcase classname="tests.test_utils" name="test_get_auth_from_url[http://user:pass%23pass@complex.url.com/path?query=yes-auth5]" time="0.000" /><testcase classname="tests.test_utils" name="test_get_auth_from_url[http://complex.url.com/path?query=yes-auth6]" time="0.001" /><testcase classname="tests.test_utils" name="test_requote_uri_with_unquoted_percents[http://example.com/fiz?buz=%25ppicture-http://example.com/fiz?buz=%25ppicture]" time="0.000" /><testcase classname="tests.test_utils" name="test_requote_uri_with_unquoted_percents[http://example.com/fiz?buz=%ppicture-http://example.com/fiz?buz=%25ppicture]" time="0.000" /><testcase classname="tests.test_utils" name="test_unquote_unreserved[http://example.com/?a=%---http://example.com/?a=%--]" time="0.001" /><testcase classname="tests.test_utils" name="test_unquote_unreserved[http://example.com/?a=%300-http://example.com/?a=00]" time="0.001" /><testcase classname="tests.test_utils" name="test_dotted_netmask[8-255.0.0.0]" time="0.000" /><testcase classname="tests.test_utils" name="test_dotted_netmask[24-255.255.255.0]" time="0.001" /><testcase classname="tests.test_utils" name="test_dotted_netmask[25-255.255.255.128]" time="0.002" /><testcase classname="tests.test_utils" name="test_select_proxies[hTTp://u:p@Some.Host/path-http://some.host.proxy-proxies0]" time="0.001" /><testcase classname="tests.test_utils" name="test_select_proxies[hTTp://u:p@Other.Host/path-http://http.proxy-proxies1]" time="0.001" /><testcase classname="tests.test_utils" name="test_select_proxies[hTTp:///path-http://http.proxy-proxies2]" time="0.001" /><testcase classname="tests.test_utils" name="test_select_proxies[hTTps://Other.Host-None-proxies3]" time="0.001" /><testcase classname="tests.test_utils" name="test_select_proxies[file:///etc/motd-None-proxies4]" time="0.001" /><testcase classname="tests.test_utils" name="test_select_proxies[hTTp://u:p@Some.Host/path-socks5://some.host.proxy-proxies5]" time="0.002" /><testcase classname="tests.test_utils" name="test_select_proxies[hTTp://u:p@Other.Host/path-socks5://http.proxy-proxies6]" time="0.002" /><testcase classname="tests.test_utils" name="test_select_proxies[hTTp:///path-socks5://http.proxy-proxies7]" time="0.001" /><testcase classname="tests.test_utils" name="test_select_proxies[hTTps://Other.Host-socks5://http.proxy-proxies8]" time="0.001" /><testcase classname="tests.test_utils" name="test_select_proxies[http://u:p@other.host/path-http://http.proxy-proxies9]" time="0.001" /><testcase classname="tests.test_utils" name="test_select_proxies[http://u:p@some.host/path-http://some.host.proxy-proxies10]" time="0.001" /><testcase classname="tests.test_utils" name="test_select_proxies[https://u:p@other.host/path-socks5://http.proxy-proxies11]" time="0.000" /><testcase classname="tests.test_utils" name="test_select_proxies[https://u:p@some.host/path-socks5://http.proxy-proxies12]" time="0.000" /><testcase classname="tests.test_utils" name="test_select_proxies[https://-socks5://http.proxy-proxies13]" time="0.000" /><testcase classname="tests.test_utils" name="test_select_proxies[file:///etc/motd-socks5://http.proxy-proxies14]" time="0.001" /><testcase classname="tests.test_utils" name="test_parse_dict_header[foo=&quot;is a fish&quot;, bar=&quot;as well&quot;-expected0]" time="0.001" /><testcase classname="tests.test_utils" name="test_parse_dict_header[key_without_value-expected1]" time="0.001" /><testcase classname="tests.test_utils" name="test__parse_content_type_header[application/xml-expected0]" time="0.002" /><testcase classname="tests.test_utils" name="test__parse_content_type_header[application/json ; charset=utf-8-expected1]" time="0.001" /><testcase classname="tests.test_utils" name="test__parse_content_type_header[application/json ; Charset=utf-8-expected2]" time="0.000" /><testcase classname="tests.test_utils" name="test__parse_content_type_header[text/plain-expected3]" time="0.000" /><testcase classname="tests.test_utils" name="test__parse_content_type_header[multipart/form-data; boundary = something ; boundary2='something_else' ; no_equals -expected4]" time="0.000" /><testcase classname="tests.test_utils" name="test__parse_content_type_header[multipart/form-data; boundary = something ; boundary2=&quot;something_else&quot; ; no_equals -expected5]" time="0.000" /><testcase classname="tests.test_utils" name="test__parse_content_type_header[multipart/form-data; boundary = something ; 'boundary2=something_else' ; no_equals -expected6]" time="0.000" /><testcase classname="tests.test_utils" name="test__parse_content_type_header[multipart/form-data; boundary = something ; &quot;boundary2=something_else&quot; ; no_equals -expected7]" time="0.001" /><testcase classname="tests.test_utils" name="test__parse_content_type_header[application/json ; ; -expected8]" time="0.001" /><testcase classname="tests.test_utils" name="test_get_encoding_from_headers[value0-None]" time="0.000" /><testcase classname="tests.test_utils" name="test_get_encoding_from_headers[value1-utf-8]" time="0.000" /><testcase classname="tests.test_utils" name="test_get_encoding_from_headers[value2-ISO-8859-1]" time="0.000" /><testcase classname="tests.test_utils" name="test_iter_slices[-0]" time="0.000" /><testcase classname="tests.test_utils" name="test_iter_slices[T-1]" time="0.001" /><testcase classname="tests.test_utils" name="test_iter_slices[Test-4]" time="0.002" /><testcase classname="tests.test_utils" name="test_iter_slices[Cont-0]" time="0.002" /><testcase classname="tests.test_utils" name="test_iter_slices[Other--5]" time="0.001" /><testcase classname="tests.test_utils" name="test_iter_slices[Content-None]" time="0.000" /><testcase classname="tests.test_utils" name="test_parse_header_links[&lt;http:/.../front.jpeg&gt;; rel=front; type=&quot;image/jpeg&quot;-expected0]" time="0.001" /><testcase classname="tests.test_utils" name="test_parse_header_links[&lt;http:/.../front.jpeg&gt;-expected1]" time="0.001" /><testcase classname="tests.test_utils" name="test_parse_header_links[&lt;http:/.../front.jpeg&gt;;-expected2]" time="0.000" /><testcase classname="tests.test_utils" name="test_parse_header_links[&lt;http:/.../front.jpeg&gt;; type=&quot;image/jpeg&quot;,&lt;http://.../back.jpeg&gt;;-expected3]" time="0.000" /><testcase classname="tests.test_utils" name="test_parse_header_links[-expected4]" time="0.000" /><testcase classname="tests.test_utils" name="test_prepend_scheme_if_needed[example.com/path-http://example.com/path]" time="0.000" /><testcase classname="tests.test_utils" name="test_prepend_scheme_if_needed[//example.com/path-http://example.com/path]" time="0.001" /><testcase classname="tests.test_utils" name="test_prepend_scheme_if_needed[example.com:80-http://example.com:80]" time="0.000" /><testcase classname="tests.test_utils" name="test_prepend_scheme_if_needed[http://user:pass@example.com/path?query-http://user:pass@example.com/path?query]" time="0.001" /><testcase classname="tests.test_utils" name="test_prepend_scheme_if_needed[http://user@example.com/path?query-http://user@example.com/path?query]" time="0.000" /><testcase classname="tests.test_utils" name="test_to_native_string[T-T0]" time="0.000" /><testcase classname="tests.test_utils" name="test_to_native_string[T-T1]" time="0.000" /><testcase classname="tests.test_utils" name="test_to_native_string[T-T2]" time="0.000" /><testcase classname="tests.test_utils" name="test_urldefragauth[http://u:p@example.com/path?a=1#test-http://example.com/path?a=1]" time="0.000" /><testcase classname="tests.test_utils" name="test_urldefragauth[http://example.com/path-http://example.com/path]" time="0.000" /><testcase classname="tests.test_utils" name="test_urldefragauth[//u:p@example.com/path-//example.com/path]" time="0.001" /><testcase classname="tests.test_utils" name="test_urldefragauth[//example.com/path-//example.com/path]" time="0.000" /><testcase classname="tests.test_utils" name="test_urldefragauth[example.com/path-//example.com/path]" time="0.000" /><testcase classname="tests.test_utils" name="test_urldefragauth[scheme:u:p@example.com/path-scheme://example.com/path]" time="0.001" /><testcase classname="tests.test_utils" name="test_should_bypass_proxies[http://192.168.0.1:5000/-True]" time="0.001" /><testcase classname="tests.test_utils" name="test_should_bypass_proxies[http://192.168.0.1/-True]" time="0.001" /><testcase classname="tests.test_utils" name="test_should_bypass_proxies[http://172.16.1.1/-True]" time="0.001" /><testcase classname="tests.test_utils" name="test_should_bypass_proxies[http://172.16.1.1:5000/-True]" time="0.001" /><testcase classname="tests.test_utils" name="test_should_bypass_proxies[http://localhost.localdomain:5000/v1.0/-True]" time="0.001" /><testcase classname="tests.test_utils" name="test_should_bypass_proxies[http://google.com:6000/-True]" time="0.001" /><testcase classname="tests.test_utils" name="test_should_bypass_proxies[http://172.16.1.12/-False]" time="0.001" /><testcase classname="tests.test_utils" name="test_should_bypass_proxies[http://172.16.1.12:5000/-False]" time="0.001" /><testcase classname="tests.test_utils" name="test_should_bypass_proxies[http://google.com:5000/v1.0/-False]" time="0.001" /><testcase classname="tests.test_utils" name="test_should_bypass_proxies[file:///some/path/on/disk-True]" time="0.001" /><testcase classname="tests.test_utils" name="test_should_bypass_proxies_pass_only_hostname[http://172.16.1.1/-172.16.1.1]" time="0.002" /><testcase classname="tests.test_utils" name="test_should_bypass_proxies_pass_only_hostname[http://172.16.1.1:5000/-172.16.1.1]" time="0.003" /><testcase classname="tests.test_utils" name="test_should_bypass_proxies_pass_only_hostname[http://user:pass@172.16.1.1-172.16.1.1]" time="0.003" /><testcase classname="tests.test_utils" name="test_should_bypass_proxies_pass_only_hostname[http://user:pass@172.16.1.1:5000-172.16.1.1]" time="0.004" /><testcase classname="tests.test_utils" name="test_should_bypass_proxies_pass_only_hostname[http://hostname/-hostname]" time="0.001" /><testcase classname="tests.test_utils" name="test_should_bypass_proxies_pass_only_hostname[http://hostname:5000/-hostname]" time="0.002" /><testcase classname="tests.test_utils" name="test_should_bypass_proxies_pass_only_hostname[http://user:pass@hostname-hostname]" time="0.002" /><testcase classname="tests.test_utils" name="test_should_bypass_proxies_pass_only_hostname[http://user:pass@hostname:5000-hostname]" time="0.002" /><testcase classname="tests.test_utils" name="test_add_dict_to_cookiejar[cookiejar0]" time="0.001" /><testcase classname="tests.test_utils" name="test_add_dict_to_cookiejar[cookiejar1]" time="0.001" /><testcase classname="tests.test_utils" name="test_unicode_is_ascii[test-True]" time="0.001" /><testcase classname="tests.test_utils" name="test_unicode_is_ascii[\xe6\xed\xf6\xfb-False]" time="0.001" /><testcase classname="tests.test_utils" name="test_unicode_is_ascii[\u30b8\u30a7\u30fc\u30d4\u30fc\u30cb\u30c3\u30af-False]" time="0.000" /><testcase classname="tests.test_utils" name="test_should_bypass_proxies_no_proxy[http://192.168.0.1:5000/-True]" time="0.001" /><testcase classname="tests.test_utils" name="test_should_bypass_proxies_no_proxy[http://192.168.0.1/-True]" time="0.001" /><testcase classname="tests.test_utils" name="test_should_bypass_proxies_no_proxy[http://172.16.1.1/-True]" time="0.001" /><testcase classname="tests.test_utils" name="test_should_bypass_proxies_no_proxy[http://172.16.1.1:5000/-True]" time="0.000" /><testcase classname="tests.test_utils" name="test_should_bypass_proxies_no_proxy[http://localhost.localdomain:5000/v1.0/-True]" time="0.000" /><testcase classname="tests.test_utils" name="test_should_bypass_proxies_no_proxy[http://172.16.1.12/-False]" time="0.001" /><testcase classname="tests.test_utils" name="test_should_bypass_proxies_no_proxy[http://172.16.1.12:5000/-False]" time="0.001" /><testcase classname="tests.test_utils" name="test_should_bypass_proxies_no_proxy[http://google.com:5000/v1.0/-False]" time="0.001" /><testcase classname="tests.test_utils" name="test_should_bypass_proxies_win_registry[http://192.168.0.1:5000/-True-None]" time="0.000"><skipped type="pytest.skip" message="Test only on Windows">/mnt/c/Users/start/new_requests/tests/test_utils.py:815: Test only on Windows</skipped></testcase><testcase classname="tests.test_utils" name="test_should_bypass_proxies_win_registry[http://192.168.0.1/-True-None]" time="0.001"><skipped type="pytest.skip" message="Test only on Windows">/mnt/c/Users/start/new_requests/tests/test_utils.py:815: Test only on Windows</skipped></testcase><testcase classname="tests.test_utils" name="test_should_bypass_proxies_win_registry[http://172.16.1.1/-True-None]" time="0.001"><skipped type="pytest.skip" message="Test only on Windows">/mnt/c/Users/start/new_requests/tests/test_utils.py:815: Test only on Windows</skipped></testcase><testcase classname="tests.test_utils" name="test_should_bypass_proxies_win_registry[http://172.16.1.1:5000/-True-None]" time="0.001"><skipped type="pytest.skip" message="Test only on Windows">/mnt/c/Users/start/new_requests/tests/test_utils.py:815: Test only on Windows</skipped></testcase><testcase classname="tests.test_utils" name="test_should_bypass_proxies_win_registry[http://localhost.localdomain:5000/v1.0/-True-None]" time="0.000"><skipped type="pytest.skip" message="Test only on Windows">/mnt/c/Users/start/new_requests/tests/test_utils.py:815: Test only on Windows</skipped></testcase><testcase classname="tests.test_utils" name="test_should_bypass_proxies_win_registry[http://172.16.1.22/-False-None]" time="0.001"><skipped type="pytest.skip" message="Test only on Windows">/mnt/c/Users/start/new_requests/tests/test_utils.py:815: Test only on Windows</skipped></testcase><testcase classname="tests.test_utils" name="test_should_bypass_proxies_win_registry[http://172.16.1.22:5000/-False-None]" time="0.001"><skipped type="pytest.skip" message="Test only on Windows">/mnt/c/Users/start/new_requests/tests/test_utils.py:815: Test only on Windows</skipped></testcase><testcase classname="tests.test_utils" name="test_should_bypass_proxies_win_registry[http://google.com:5000/v1.0/-False-None]" time="0.001"><skipped type="pytest.skip" message="Test only on Windows">/mnt/c/Users/start/new_requests/tests/test_utils.py:815: Test only on Windows</skipped></testcase><testcase classname="tests.test_utils" name="test_should_bypass_proxies_win_registry[http://mylocalhostname:5000/v1.0/-True-&lt;local&gt;]" time="0.000"><skipped type="pytest.skip" message="Test only on Windows">/mnt/c/Users/start/new_requests/tests/test_utils.py:815: Test only on Windows</skipped></testcase><testcase classname="tests.test_utils" name="test_should_bypass_proxies_win_registry[http://192.168.0.1/-False-]" time="0.000"><skipped type="pytest.skip" message="Test only on Windows">/mnt/c/Users/start/new_requests/tests/test_utils.py:815: Test only on Windows</skipped></testcase><testcase classname="tests.test_utils" name="test_should_bypass_proxies_win_registry_bad_values" time="0.001"><skipped type="pytest.skip" message="Test only on Windows">/mnt/c/Users/start/new_requests/tests/test_utils.py:868: Test only on Windows</skipped></testcase><testcase classname="tests.test_utils" name="test_set_environ[no_proxy-192.168.0.0/24,127.0.0.1,localhost.localdomain]" time="0.001" /><testcase classname="tests.test_utils" name="test_set_environ[no_proxy-None]" time="0.001" /><testcase classname="tests.test_utils" name="test_set_environ[a_new_key-192.168.0.0/24,127.0.0.1,localhost.localdomain]" time="0.002" /><testcase classname="tests.test_utils" name="test_set_environ[a_new_key-None]" time="0.001" /><testcase classname="tests.test_utils" name="test_set_environ_raises_exception" time="0.000" /><testcase classname="tests.test_utils" name="test_should_bypass_proxies_win_registry_ProxyOverride_value" time="0.435"><skipped type="pytest.skip" message="Test only on Windows">/mnt/c/Users/start/new_requests/tests/test_utils.py:929: Test only on Windows</skipped></testcase></testsuite></testsuites>